zqlParser = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleFunctions = { start: peg$parsestart },
        peg$startRuleFunction  = peg$parsestart,

        peg$c0 = function(zql) {
         initParsing();
        // printZqlTokens();
         return zql ;
        },
        peg$c1 = [],
        peg$c2 = " ",
        peg$c3 = { type: "literal", value: " ", description: "\" \"" },
        peg$c4 = function(ws) {
        // // console.log("ws: " + ws)
        return addZqlToken(ws.join(""), "ws");
        //return num.join("");
        },
        peg$c5 = peg$FAILED,
        peg$c6 = "\"",
        peg$c7 = { type: "literal", value: "\"", description: "\"\\\"\"" },
        peg$c8 = function(str) {
        // // console.log("str : " + str)
        //return addZqlToken(str.join(""), "string", 2);	// +2 for enclosing quotes
        return addZqlToken('"' + str + '"', "string");	// +2 for enclosing quotes
        //return str.join("");
        },
        peg$c9 = function(chars) { return chars.join(""); },
        peg$c10 = /^[^"\\\0-\x1F]/,
        peg$c11 = { type: "class", value: "[^\"\\\\\\0-\\x1F]", description: "[^\"\\\\\\0-\\x1F]" },
        peg$c12 = "\\\"",
        peg$c13 = { type: "literal", value: "\\\"", description: "\"\\\\\\\"\"" },
        peg$c14 = function() { return '"';  },
        peg$c15 = "\\\\",
        peg$c16 = { type: "literal", value: "\\\\", description: "\"\\\\\\\\\"" },
        peg$c17 = function() { return "\\"; },
        peg$c18 = "\\/",
        peg$c19 = { type: "literal", value: "\\/", description: "\"\\\\/\"" },
        peg$c20 = function() { return "/";  },
        peg$c21 = "\\b",
        peg$c22 = { type: "literal", value: "\\b", description: "\"\\\\b\"" },
        peg$c23 = function() { return "\b"; },
        peg$c24 = "\\f",
        peg$c25 = { type: "literal", value: "\\f", description: "\"\\\\f\"" },
        peg$c26 = function() { return "\f"; },
        peg$c27 = "\\n",
        peg$c28 = { type: "literal", value: "\\n", description: "\"\\\\n\"" },
        peg$c29 = function() { return "\n"; },
        peg$c30 = "\\r",
        peg$c31 = { type: "literal", value: "\\r", description: "\"\\\\r\"" },
        peg$c32 = function() { return "\r"; },
        peg$c33 = "\\t",
        peg$c34 = { type: "literal", value: "\\t", description: "\"\\\\t\"" },
        peg$c35 = function() { return "\t"; },
        peg$c36 = "\\u",
        peg$c37 = { type: "literal", value: "\\u", description: "\"\\\\u\"" },
        peg$c38 = function(digits) {
              return String.fromCharCode(parseInt(digits, 16));
            },
        peg$c39 = /^[0-9a-fA-F]/,
        peg$c40 = { type: "class", value: "[0-9a-fA-F]", description: "[0-9a-fA-F]" },
        peg$c41 = null,
        peg$c42 = /^[\-]/,
        peg$c43 = { type: "class", value: "[\\-]", description: "[\\-]" },
        peg$c44 = /^[0-9]/,
        peg$c45 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c46 = function(num) {
        // console.log("num: " + num)
        return addZqlToken(joinArrayRecursively(num), "number");
        //return num.join("");
        },
        peg$c47 = { type: "any", description: "any character" },
        peg$c48 = function(dec) {
        // console.log("num: " + dec)
        return addZqlToken(joinArrayRecursively(dec), "decimal");
        //return num.join("");
        },
        peg$c49 = "true",
        peg$c50 = { type: "literal", value: "true", description: "\"true\"" },
        peg$c51 = "false",
        peg$c52 = { type: "literal", value: "false", description: "\"false\"" },
        peg$c53 = function(bool) {
        //// console.log("bool: " + bool)
        return addZqlToken(bool, "boolean");
        //return bool;
        },
        peg$c54 = /^[a-zA-Z]/,
        peg$c55 = { type: "class", value: "[a-zA-Z]", description: "[a-zA-Z]" },
        peg$c56 = /^[a-zA-Z0-9\-_]/,
        peg$c57 = { type: "class", value: "[a-zA-Z0-9\\-_]", description: "[a-zA-Z0-9\\-_]" },
        peg$c58 = function(attrName) {
        // console.log("attrName: " + attrName );
        return addZqlToken(joinArrayRecursively(attrName), "attrName");
        //return addZqlToken(joinTokensAsString(attrName), "attrName");
        //return attrName.join("");
        },
        peg$c59 = function(attrValue) {
        // console.log("attrValue: " + attrValue)
        return addZqlToken(attrValue, "attrValue");
        //return attrValue;
        },
        peg$c60 = "(",
        peg$c61 = { type: "literal", value: "(", description: "\"(\"" },
        peg$c62 = function(bracketOpen) {
        // console.log("bracketOpen: " + bracketOpen)
        return addZqlToken(bracketOpen, "bracketOpen");
        },
        peg$c63 = ")",
        peg$c64 = { type: "literal", value: ")", description: "\")\"" },
        peg$c65 = function(bracketClosed) {
        // console.log("bracketClosed: " + bracketClosed)
        return addZqlToken(bracketClosed, "bracketClosed");
        },
        peg$c66 = ",",
        peg$c67 = { type: "literal", value: ",", description: "\",\"" },
        peg$c68 = function(comma) {
        // console.log("comma: " + comma)
        return addZqlToken(comma, "comma");
        },
        peg$c69 = "=",
        peg$c70 = { type: "literal", value: "=", description: "\"=\"" },
        peg$c71 = "!=",
        peg$c72 = { type: "literal", value: "!=", description: "\"!=\"" },
        peg$c73 = "~",
        peg$c74 = { type: "literal", value: "~", description: "\"~\"" },
        peg$c75 = "!~",
        peg$c76 = { type: "literal", value: "!~", description: "\"!~\"" },
        peg$c77 = "in",
        peg$c78 = { type: "literal", value: "in", description: "\"in\"" },
        peg$c79 = function(attrOp) {
        // console.log("debug attrOp: " + attrOp)
        return addZqlToken(attrOp, "attrOp");
        //return attrOp;
        },
        peg$c80 = "and",
        peg$c81 = { type: "literal", value: "and", description: "\"and\"" },
        peg$c82 = "or",
        peg$c83 = { type: "literal", value: "or", description: "\"or\"" },
        peg$c84 = "not",
        peg$c85 = { type: "literal", value: "not", description: "\"not\"" },
        peg$c86 = function(myop) {
        // console.log("op: " + myop)
        return addZqlToken(myop, "zqlOp");
        //return myop;
        },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$parsestart() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsezql();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c0(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsews() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (input.charCodeAt(peg$currPos) === 32) {
        s2 = peg$c2;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c3); }
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (input.charCodeAt(peg$currPos) === 32) {
          s2 = peg$c2;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c3); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c4(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsestring() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 34) {
        s1 = peg$c6;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c7); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsechars();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 34) {
            s3 = peg$c6;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c7); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c8(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c5;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c5;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c5;
      }

      return s0;
    }

    function peg$parsechars() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsechar();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parsechar();
        }
      } else {
        s1 = peg$c5;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c9(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsechar() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      if (peg$c10.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c11); }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c12) {
          s1 = peg$c12;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c13); }
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c14();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c15) {
            s1 = peg$c15;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c16); }
          }
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c17();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c18) {
              s1 = peg$c18;
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c19); }
            }
            if (s1 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c20();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 2) === peg$c21) {
                s1 = peg$c21;
                peg$currPos += 2;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c22); }
              }
              if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c23();
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c24) {
                  s1 = peg$c24;
                  peg$currPos += 2;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c25); }
                }
                if (s1 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c26();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 2) === peg$c27) {
                    s1 = peg$c27;
                    peg$currPos += 2;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c28); }
                  }
                  if (s1 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c29();
                  }
                  s0 = s1;
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 2) === peg$c30) {
                      s1 = peg$c30;
                      peg$currPos += 2;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c31); }
                    }
                    if (s1 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c32();
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      if (input.substr(peg$currPos, 2) === peg$c33) {
                        s1 = peg$c33;
                        peg$currPos += 2;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c34); }
                      }
                      if (s1 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c35();
                      }
                      s0 = s1;
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.substr(peg$currPos, 2) === peg$c36) {
                          s1 = peg$c36;
                          peg$currPos += 2;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c37); }
                        }
                        if (s1 !== peg$FAILED) {
                          s2 = peg$currPos;
                          s3 = peg$currPos;
                          s4 = peg$parsehexDigit();
                          if (s4 !== peg$FAILED) {
                            s5 = peg$parsehexDigit();
                            if (s5 !== peg$FAILED) {
                              s6 = peg$parsehexDigit();
                              if (s6 !== peg$FAILED) {
                                s7 = peg$parsehexDigit();
                                if (s7 !== peg$FAILED) {
                                  s4 = [s4, s5, s6, s7];
                                  s3 = s4;
                                } else {
                                  peg$currPos = s3;
                                  s3 = peg$c5;
                                }
                              } else {
                                peg$currPos = s3;
                                s3 = peg$c5;
                              }
                            } else {
                              peg$currPos = s3;
                              s3 = peg$c5;
                            }
                          } else {
                            peg$currPos = s3;
                            s3 = peg$c5;
                          }
                          if (s3 !== peg$FAILED) {
                            s3 = input.substring(s2, peg$currPos);
                          }
                          s2 = s3;
                          if (s2 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c38(s2);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c5;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c5;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsehexDigit() {
      var s0;

      if (peg$c39.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c40); }
      }

      return s0;
    }

    function peg$parsenumber() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (peg$c42.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c43); }
      }
      if (s2 === peg$FAILED) {
        s2 = peg$c41;
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        if (peg$c44.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c45); }
        }
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            if (peg$c44.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c45); }
            }
          }
        } else {
          s3 = peg$c5;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c5;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c5;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c46(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsedecimal() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (peg$c42.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c43); }
      }
      if (s2 === peg$FAILED) {
        s2 = peg$c41;
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        if (peg$c44.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c45); }
        }
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            if (peg$c44.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c45); }
            }
          }
        } else {
          s3 = peg$c5;
        }
        if (s3 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c47); }
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            if (peg$c44.test(input.charAt(peg$currPos))) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c45); }
            }
            if (s6 !== peg$FAILED) {
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                if (peg$c44.test(input.charAt(peg$currPos))) {
                  s6 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c45); }
                }
              }
            } else {
              s5 = peg$c5;
            }
            if (s5 !== peg$FAILED) {
              s2 = [s2, s3, s4, s5];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$c5;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c5;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c5;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c5;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c48(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsebool() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c49) {
        s1 = peg$c49;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c50); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c51) {
          s1 = peg$c51;
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c52); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c53(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseATTR_NAME() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (peg$c54.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c55); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        if (peg$c56.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c57); }
        }
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            if (peg$c56.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c57); }
            }
          }
        } else {
          s3 = peg$c5;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c5;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c5;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c58(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseattrValue() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsebool();
      if (s1 === peg$FAILED) {
        s1 = peg$parsedecimal();
        if (s1 === peg$FAILED) {
          s1 = peg$parsenumber();
          if (s1 === peg$FAILED) {
            s1 = peg$parsestring();
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c59(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsebracketOpen() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c60;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c61); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c62(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsebracketClosed() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 41) {
        s1 = peg$c63;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c64); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c65(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsecomma() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 44) {
        s1 = peg$c66;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c67); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c68(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseattrMultiValue() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parsebracketOpen();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseattrValue();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$currPos;
            s6 = peg$parsews();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsecomma();
              if (s7 !== peg$FAILED) {
                s8 = peg$parsews();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseattrValue();
                  if (s9 !== peg$FAILED) {
                    s6 = [s6, s7, s8, s9];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c5;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c5;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c5;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$c5;
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              s6 = peg$parsews();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsecomma();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsews();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseattrValue();
                    if (s9 !== peg$FAILED) {
                      s6 = [s6, s7, s8, s9];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c5;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c5;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c5;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c5;
              }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsews();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsebracketClosed();
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c5;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c5;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c5;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c5;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c5;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c5;
      }

      return s0;
    }

    function peg$parseattrOp() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 61) {
        s1 = peg$c69;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c70); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c71) {
          s1 = peg$c71;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c72); }
        }
        if (s1 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 126) {
            s1 = peg$c73;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c74); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c75) {
              s1 = peg$c75;
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c76); }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c77) {
                s1 = peg$c77;
                peg$currPos += 2;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c78); }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c79(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseattrStatement() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseATTR_NAME();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseattrOp();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsews();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseattrValue();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsews();
                  if (s7 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4, s5, s6, s7];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c5;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c5;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c5;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c5;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c5;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c5;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c5;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsews();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseATTR_NAME();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsews();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseattrOp();
              if (s4 !== peg$FAILED) {
                s5 = peg$parsews();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseattrMultiValue();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parsews();
                    if (s7 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5, s6, s7];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c5;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c5;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c5;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c5;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c5;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c5;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c5;
        }
      }

      return s0;
    }

    function peg$parsezqlOp() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c80) {
        s1 = peg$c80;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c81); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c82) {
          s1 = peg$c82;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c83); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c84) {
            s1 = peg$c84;
            peg$currPos += 3;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c85); }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c86(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseattrParExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c60;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c61); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseattrStatement();
        if (s2 === peg$FAILED) {
          s2 = peg$parseattrParExpression();
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parsews();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsezqlOp();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsews();
              if (s7 !== peg$FAILED) {
                s8 = peg$parseattrStatement();
                if (s8 === peg$FAILED) {
                  s8 = peg$parseattrParExpression();
                }
                if (s8 !== peg$FAILED) {
                  s5 = [s5, s6, s7, s8];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c5;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c5;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c5;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c5;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parsews();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsezqlOp();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsews();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseattrStatement();
                  if (s8 === peg$FAILED) {
                    s8 = peg$parseattrParExpression();
                  }
                  if (s8 !== peg$FAILED) {
                    s5 = [s5, s6, s7, s8];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c5;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c5;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c5;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c5;
            }
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s4 = peg$c63;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c64); }
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c5;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c5;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c5;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c5;
      }

      return s0;
    }

    function peg$parseattrExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseattrStatement();
      if (s1 === peg$FAILED) {
        s1 = peg$parseattrParExpression();
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parsews();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsezqlOp();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsews();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseattrStatement();
              if (s7 === peg$FAILED) {
                s7 = peg$parseattrParExpression();
              }
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c5;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c5;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c5;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c5;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parsews();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsezqlOp();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsews();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseattrStatement();
                if (s7 === peg$FAILED) {
                  s7 = peg$parseattrParExpression();
                }
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c5;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c5;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c5;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c5;
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c5;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c5;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c5;
      }

      return s0;
    }

    function peg$parsezql() {
      var s0;

      s0 = peg$parseattrExpression();
      if (s0 === peg$FAILED) {
        s0 = peg$parsews();
      }

      return s0;
    }


    /*
     ________   _____   __
    /\_____  \ /\  __`\/\ \
    \/____//'/'\ \ \/\ \ \ \
         //'/'  \ \ \ \ \ \ \  __
        //'/'___ \ \ \\'\\ \ \L\ \
        /\_______\\ \___\_\ \____/
        \/_______/ \/__//_/\/___/

    */
    //===============================================
    //        ZQL LOGIC STARTS HERE
    //===============================================

    // attrName
    // attrOp = ~ etc
    // attrValue can be: boolean/number/decimal/string
    // attrMultiValue (after in clause) is not directly inserted, instead tokens are:
    // 		attrMultiValueBracketOpen, comma, attrMultiValueBracketClosed
    //
    // bracketOpen, bracketClosed (reserved, not used)
    // ws
    // zqlOp : and/or/not

    //===============================================
    //        ZQL METHODS (start)
    //===============================================

     function initParsing() {
     	// console.log("init parsing");
     }

     function addZqlToken(value, typ, extraLen) {
       var tok = new Object();
       tok.value = value;
       tok.type = typ ;
       tok.pos = peg$reportedPos ;
       if (!extraLen) {
    	   tok.len = value.length ;
       } else {
    	   tok.len = value.length + extraLen ;
       }

       if (tok.len == 0) {
    		return ;
    	}

    	// peg.js evaluates and fetches same token multiple times. So ignoring it.
    	if (options.tokenArray.length > 0) {
    		var lastToken = options.tokenArray[options.tokenArray.length-1] ;
    		if (lastToken.pos >= peg$reportedPos) {
    			// ignore this token
    			// console.log("ignoring: " + value + " " + typ + " pos: " + tok.pos + " len: " + tok.len);
    			return ;
    		}
    	}


       if (typ != "attrValue") {
          options.tokenArray.push(tok);
    	}
       // console.log("pushing: " + value + " " + typ + " pos: " + tok.pos + " len: " + tok.len);
       if (typ == "attrName") {
          // console.log(">>>> attrName: " + value);
          verifyZqlFieldName(value);
       } else if (typ == "attrOp") {
          // console.log(">>>> attrOp: " + value);
          verifyZqlFieldOperator(value);
       } else if (typ == "number") {
          // console.log(">>> num: " + value)
          verifyDataType(typ);
       } else if (typ == "boolean") {
          // console.log(">>> boolean: " + value)
          verifyDataType(typ);
       } else if (typ == "string") {
          // console.log(">>> string: " + value)
          verifyDataType(typ);
       } else if (typ == "attrValue") {
          // console.log(">>> attrValue: " + value)
          verifyZqlFieldValue(value);
       } else if (typ == "bracketOpen") {
       		if (options.currentOp) {
       			typ.type = "attrMultiValueBracketOpen";
       		}
       } else if (typ == "comma") {
    		;
       } else if (typ == "bracketClosed") {
       		if (options.currentOp) {
       			typ.type = "attrMultiValueBracketClosed";
       			options.currentOp = null ;
       		}
       }
       return tok ;
     }

     function joinTokensAsString(tok) {
     	var str = "" ;	// joined string
     	if (tok instanceof Array) {
     		str += joinArrayRecursively(tok) ;

     	// don't know how to determine character by instanceof operator.
     	} else {
     		str += tok ;
     	}
     	return str ;
     }

     function joinArrayRecursively(tok) {
     	var str = "" ;
     	for (var i = 0; i < tok.length; i++) {
     		if (tok[i] instanceof Array) {
     			str += tok[i].join("");
     		} else {
     			str += tok[i] ;
     		}
     	}
     	return str ;
     }

    //===============================================
    //        ZQL METHODS (end)
    //===============================================

    //===============================================
    //        DEBUG METHODS (start)
    //===============================================

     function printZqlTokens() {
       for (var i=0; i<options.tokenArray.length; i++) {
         var obj = options.tokenArray[i];
         // console.log(" " + i + " tok:" + obj.value + " " + obj.type);
       }
     }

    //===============================================
    //        DEBUG METHODS (end)
    //===============================================

    //===============================================
    //        UTIL METHODS (start)
    //===============================================

     function getZqlFieldNames() {
       var ar = new Array() ;
       for (var i= 0; i < options.zqlMeta.length; i++) {
           ar.push(options.zqlMeta[i].name) ;
       }
       return ar ;
      }

    //===============================================
    //        UTIL METHODS (end)
    //===============================================

    //===============================================
    //        VERIFICATION METHODS (start)
    //===============================================

     function verifyZqlFieldName(attributeName) {
       if (!options.zqlMeta) {
          options.appErrorMessage = "Unable to verify ZQL field name. Metadata is missing.";
          // console.log("Error: " + options.appErrorMessage );
          throw peg$buildException(options.appErrorMessage, null, peg$reportedPos);
       }
       for (var i= 0; i < options.zqlMeta.length; i++) {
         if (options.zqlMeta[i].name == attributeName) {
            options.currentZqlField = options.zqlMeta[i] ;
            // console.log(">>>> field matched: " + options.zqlMeta[i].name);
            return options.currentZqlField ;
         }
       }
       // console.log("field name is invalid");
       options.appErrorMessage = "Field " + attributeName + " is invalid. Valid field names are: " + getZqlFieldNames().join(", ") ;
       throw peg$buildException(options.appErrorMessage, null, peg$reportedPos);
     }

     function verifyZqlFieldOperator(operator) {
       if (!options.currentZqlField) {
          options.appErrorMessage = "Unexpected operator value. ZQL field name is unavailable.";
          // console.log("Error: " + options.appErrorMessage );
          throw peg$buildException(options.appErrorMessage, null, peg$reportedPos);
       }
       for (var i = 0; i < options.currentZqlField.operators.length; i++) {
         if (options.currentZqlField.operators[i] == operator) {
           // console.log("operator matched: " + operator );
           options.currentOp = operator ;
           return ;
         }
       }

       // console.log("operator mismatch");

       options.appErrorMessage = "Operators " + options.currentZqlField.operators + " are expected, found " + operator + " instead. ";
       throw peg$buildException(options.appErrorMessage, options.currentZqlField.operators, peg$reportedPos);

     }

      function verifyDataType(val) {
        if (!options.currentZqlField) {
          options.appErrorMessage = "Unexpected data of type " + val + " obtained. ZQL may be invalid";
          // console.log("options.currentZqlField is not set. Error. " + options.appErrorMessage);
          throw peg$buildException(options.appErrorMessage, null, peg$reportedPos);
        }

        if (options.currentZqlField.dataType == val
        	|| (options.currentZqlField.dataType == "long" && val == "number")
        	|| (options.currentZqlField.dataType == "decimal" && val == "number")) {

        	if (options.currentOp != "in") {
        		options.currentOp = null ; // reset it
        	}

        	return ;
        }

        options.appErrorMessage = "Expected data of type " + options.currentZqlField.dataType
            + ". Obtained " + val + " instead.";
        // console.log("Error: " + options.appErrorMessage);
        throw peg$buildException(options.appErrorMessage, null, peg$reportedPos);
      }

      // data type is already verified. This is redundant
      function verifyZqlFieldValue(val) {
        if (!options.currentZqlField) {
          // console.log("options.currentZqlField is not set. Error");
          return ;
        }
        // console.log("data type expected: " + options.currentZqlField.dataType);
      }

    //===============================================
    //        VERIFICATION METHODS (end)
    //===============================================

    //===============================================
    //        ZQL LOGIC ENDS HERE
    //===============================================


    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();
