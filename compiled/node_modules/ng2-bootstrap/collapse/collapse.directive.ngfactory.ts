/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from 'ng2-bootstrap/collapse/collapse.directive';
import * as import1 from '@angular/core/src/change_detection/change_detection_util';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/security';
export class Wrapper_CollapseDirective {
  /*private*/ _eventHandler:Function;
  context:import0.CollapseDirective;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  /*private*/ _expr_3:any;
  /*private*/ _expr_4:any;
  /*private*/ _expr_5:any;
  /*private*/ _expr_6:any;
  /*private*/ _expr_7:any;
  subscription0:any;
  subscription1:any;
  constructor(p0:any,p1:any) {
    this._changed = false;
    this.context = new import0.CollapseDirective(p0,p1);
    this._expr_0 = import1.UNINITIALIZED;
    this._expr_1 = import1.UNINITIALIZED;
    this._expr_2 = import1.UNINITIALIZED;
    this._expr_3 = import1.UNINITIALIZED;
    this._expr_4 = import1.UNINITIALIZED;
    this._expr_5 = import1.UNINITIALIZED;
    this._expr_6 = import1.UNINITIALIZED;
    this._expr_7 = import1.UNINITIALIZED;
  }
  ngOnDetach(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    (this.subscription0 && this.subscription0.unsubscribe());
    (this.subscription1 && this.subscription1.unsubscribe());
  }
  check_collapse(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.collapse = currValue;
      this._expr_0 = currValue;
    }
  }
  ngDoCheck(view:import2.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any,throwOnChange:boolean):void {
    const currVal_1:any = this.context.isCollapse;
    if (import3.checkBinding(throwOnChange,this._expr_1,currVal_1)) {
      view.renderer.setElementClass(el,'collapse',currVal_1);
      this._expr_1 = currVal_1;
    }
    const currVal_2:any = this.context.display;
    if (import3.checkBinding(throwOnChange,this._expr_2,currVal_2)) {
      view.renderer.setElementStyle(el,'display',((view.viewUtils.sanitizer.sanitize(import4.SecurityContext.STYLE,currVal_2) == null)? (null as any): view.viewUtils.sanitizer.sanitize(import4.SecurityContext.STYLE,currVal_2).toString()));
      this._expr_2 = currVal_2;
    }
    const currVal_3:any = this.context.isExpanded;
    if (import3.checkBinding(throwOnChange,this._expr_3,currVal_3)) {
      view.renderer.setElementClass(el,'in',currVal_3);
      this._expr_3 = currVal_3;
    }
    const currVal_4:any = this.context.isExpanded;
    if (import3.checkBinding(throwOnChange,this._expr_4,currVal_4)) {
      view.renderer.setElementClass(el,'show',currVal_4);
      this._expr_4 = currVal_4;
    }
    const currVal_5:any = this.context.isExpanded;
    if (import3.checkBinding(throwOnChange,this._expr_5,currVal_5)) {
      view.renderer.setElementAttribute(el,'aria-expanded',((currVal_5 == null)? (null as any): currVal_5.toString()));
      this._expr_5 = currVal_5;
    }
    const currVal_6:any = this.context.isCollapsed;
    if (import3.checkBinding(throwOnChange,this._expr_6,currVal_6)) {
      view.renderer.setElementAttribute(el,'aria-hidden',((currVal_6 == null)? (null as any): currVal_6.toString()));
      this._expr_6 = currVal_6;
    }
    const currVal_7:any = this.context.isCollapsing;
    if (import3.checkBinding(throwOnChange,this._expr_7,currVal_7)) {
      view.renderer.setElementClass(el,'collapsing',currVal_7);
      this._expr_7 = currVal_7;
    }
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import2.AppView<any>,_eventHandler:any,emit0:boolean,emit1:boolean):void {
    this._eventHandler = _eventHandler;
    if (emit0) { (this.subscription0 = this.context.collapsed.subscribe(_eventHandler.bind(view,'collapsed'))); }
    if (emit1) { (this.subscription1 = this.context.expanded.subscribe(_eventHandler.bind(view,'expanded'))); }
  }
}