/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from 'ng2-bootstrap/datepicker/datepicker.component';
import * as import1 from '@angular/core/src/change_detection/change_detection_util';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/render/api';
import * as import5 from '@angular/core/src/metadata/view';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/change_detection/constants';
import * as import8 from '@angular/core/src/linker/component_factory';
import * as import9 from 'ng2-bootstrap/datepicker/datepicker.config';
import * as import10 from '@angular/forms/src/directives/control_value_accessor';
import * as import11 from '@angular/core/src/linker/query_list';
import * as import12 from 'ng2-bootstrap/datepicker/datepicker-inner.component';
import * as import13 from './datepicker-inner.component.ngfactory';
import * as import14 from 'ng2-bootstrap/datepicker/daypicker.component';
import * as import15 from './daypicker.component.ngfactory';
import * as import16 from 'ng2-bootstrap/datepicker/monthpicker.component';
import * as import17 from './monthpicker.component.ngfactory';
import * as import18 from 'ng2-bootstrap/datepicker/yearpicker.component';
import * as import19 from './yearpicker.component.ngfactory';
export class Wrapper_DatePickerComponent {
  /*private*/ _eventHandler:Function;
  context:import0.DatePickerComponent;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  /*private*/ _expr_3:any;
  /*private*/ _expr_4:any;
  /*private*/ _expr_5:any;
  /*private*/ _expr_6:any;
  /*private*/ _expr_7:any;
  /*private*/ _expr_8:any;
  /*private*/ _expr_9:any;
  /*private*/ _expr_10:any;
  /*private*/ _expr_11:any;
  /*private*/ _expr_12:any;
  /*private*/ _expr_13:any;
  /*private*/ _expr_14:any;
  /*private*/ _expr_15:any;
  /*private*/ _expr_16:any;
  /*private*/ _expr_17:any;
  /*private*/ _expr_18:any;
  /*private*/ _expr_19:any;
  /*private*/ _expr_20:any;
  /*private*/ _expr_21:any;
  subscription0:any;
  subscription1:any;
  constructor(p0:any) {
    this._changed = false;
    this.context = new import0.DatePickerComponent(p0);
    this._expr_0 = import1.UNINITIALIZED;
    this._expr_1 = import1.UNINITIALIZED;
    this._expr_2 = import1.UNINITIALIZED;
    this._expr_3 = import1.UNINITIALIZED;
    this._expr_4 = import1.UNINITIALIZED;
    this._expr_5 = import1.UNINITIALIZED;
    this._expr_6 = import1.UNINITIALIZED;
    this._expr_7 = import1.UNINITIALIZED;
    this._expr_8 = import1.UNINITIALIZED;
    this._expr_9 = import1.UNINITIALIZED;
    this._expr_10 = import1.UNINITIALIZED;
    this._expr_11 = import1.UNINITIALIZED;
    this._expr_12 = import1.UNINITIALIZED;
    this._expr_13 = import1.UNINITIALIZED;
    this._expr_14 = import1.UNINITIALIZED;
    this._expr_15 = import1.UNINITIALIZED;
    this._expr_16 = import1.UNINITIALIZED;
    this._expr_17 = import1.UNINITIALIZED;
    this._expr_18 = import1.UNINITIALIZED;
    this._expr_19 = import1.UNINITIALIZED;
    this._expr_20 = import1.UNINITIALIZED;
    this._expr_21 = import1.UNINITIALIZED;
  }
  ngOnDetach(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    (this.subscription0 && this.subscription0.unsubscribe());
    (this.subscription1 && this.subscription1.unsubscribe());
  }
  check_datepickerMode(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.datepickerMode = currValue;
      this._expr_0 = currValue;
    }
  }
  check_initDate(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.initDate = currValue;
      this._expr_1 = currValue;
    }
  }
  check_minDate(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_2,currValue))) {
      this._changed = true;
      this.context.minDate = currValue;
      this._expr_2 = currValue;
    }
  }
  check_maxDate(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_3,currValue))) {
      this._changed = true;
      this.context.maxDate = currValue;
      this._expr_3 = currValue;
    }
  }
  check_minMode(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_4,currValue))) {
      this._changed = true;
      this.context.minMode = currValue;
      this._expr_4 = currValue;
    }
  }
  check_maxMode(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_5,currValue))) {
      this._changed = true;
      this.context.maxMode = currValue;
      this._expr_5 = currValue;
    }
  }
  check_showWeeks(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_6,currValue))) {
      this._changed = true;
      this.context.showWeeks = currValue;
      this._expr_6 = currValue;
    }
  }
  check_formatDay(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_7,currValue))) {
      this._changed = true;
      this.context.formatDay = currValue;
      this._expr_7 = currValue;
    }
  }
  check_formatMonth(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_8,currValue))) {
      this._changed = true;
      this.context.formatMonth = currValue;
      this._expr_8 = currValue;
    }
  }
  check_formatYear(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_9,currValue))) {
      this._changed = true;
      this.context.formatYear = currValue;
      this._expr_9 = currValue;
    }
  }
  check_formatDayHeader(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_10,currValue))) {
      this._changed = true;
      this.context.formatDayHeader = currValue;
      this._expr_10 = currValue;
    }
  }
  check_formatDayTitle(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_11,currValue))) {
      this._changed = true;
      this.context.formatDayTitle = currValue;
      this._expr_11 = currValue;
    }
  }
  check_formatMonthTitle(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_12,currValue))) {
      this._changed = true;
      this.context.formatMonthTitle = currValue;
      this._expr_12 = currValue;
    }
  }
  check_startingDay(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_13,currValue))) {
      this._changed = true;
      this.context.startingDay = currValue;
      this._expr_13 = currValue;
    }
  }
  check_yearRange(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_14,currValue))) {
      this._changed = true;
      this.context.yearRange = currValue;
      this._expr_14 = currValue;
    }
  }
  check_onlyCurrentMonth(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_15,currValue))) {
      this._changed = true;
      this.context.onlyCurrentMonth = currValue;
      this._expr_15 = currValue;
    }
  }
  check_shortcutPropagation(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_16,currValue))) {
      this._changed = true;
      this.context.shortcutPropagation = currValue;
      this._expr_16 = currValue;
    }
  }
  check_monthColLimit(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_17,currValue))) {
      this._changed = true;
      this.context.monthColLimit = currValue;
      this._expr_17 = currValue;
    }
  }
  check_yearColLimit(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_18,currValue))) {
      this._changed = true;
      this.context.yearColLimit = currValue;
      this._expr_18 = currValue;
    }
  }
  check_customClass(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_19,currValue))) {
      this._changed = true;
      this.context.customClass = currValue;
      this._expr_19 = currValue;
    }
  }
  check_dateDisabled(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_20,currValue))) {
      this._changed = true;
      this.context.dateDisabled = currValue;
      this._expr_20 = currValue;
    }
  }
  check_activeDate(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_21,currValue))) {
      this._changed = true;
      this.context.activeDate = currValue;
      this._expr_21 = currValue;
    }
  }
  ngDoCheck(view:import2.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import2.AppView<any>,_eventHandler:any,emit0:boolean,emit1:boolean):void {
    this._eventHandler = _eventHandler;
    if (emit0) { (this.subscription0 = this.context.selectionDone.subscribe(_eventHandler.bind(view,'selectionDone'))); }
    if (emit1) { (this.subscription1 = this.context.activeDateChange.subscribe(_eventHandler.bind(view,'activeDateChange'))); }
  }
}
var renderType_DatePickerComponent_Host:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,([] as any[]),{});
class View_DatePickerComponent_Host0 extends import2.AppView<any> {
  _el_0:any;
  compView_0:import2.AppView<import0.DatePickerComponent>;
  _DatePickerComponent_0_3:Wrapper_DatePickerComponent;
  __NG_VALUE_ACCESSOR_0_4:any[];
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_DatePickerComponent_Host0,renderType_DatePickerComponent_Host,import6.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways);
  }
  get _NG_VALUE_ACCESSOR_0_4():any[] {
    if ((this.__NG_VALUE_ACCESSOR_0_4 == null)) { (this.__NG_VALUE_ACCESSOR_0_4 = [this._DatePickerComponent_0_3.context]); }
    return this.__NG_VALUE_ACCESSOR_0_4;
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'datepicker',import3.EMPTY_INLINE_ARRAY,rootSelector,(null as any));
    this.compView_0 = new View_DatePickerComponent0(this.viewUtils,this,0,this._el_0);
    this._DatePickerComponent_0_3 = new Wrapper_DatePickerComponent(this.injectorGet(import9.DatepickerConfig,this.parentIndex));
    this.compView_0.create(this._DatePickerComponent_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import8.ComponentRef_<any>(0,this,this._el_0,this._DatePickerComponent_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.DatePickerComponent) && (0 === requestNodeIndex))) { return this._DatePickerComponent_0_3.context; }
    if (((token === import10.NG_VALUE_ACCESSOR) && (0 === requestNodeIndex))) { return this._NG_VALUE_ACCESSOR_0_4; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._DatePickerComponent_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
    this._DatePickerComponent_0_3.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
export const DatePickerComponentNgFactory:import8.ComponentFactory<import0.DatePickerComponent> = new import8.ComponentFactory<import0.DatePickerComponent>('datepicker',View_DatePickerComponent_Host0,import0.DatePickerComponent);
const styles_DatePickerComponent:any[] = ([] as any[]);
var renderType_DatePickerComponent:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,styles_DatePickerComponent,{});
export class View_DatePickerComponent0 extends import2.AppView<import0.DatePickerComponent> {
  _viewQuery_DatePickerInnerComponent_0:import11.QueryList<any>;
  _text_0:any;
  _el_1:any;
  compView_1:import2.AppView<import12.DatePickerInnerComponent>;
  _DatePickerInnerComponent_1_3:import13.Wrapper_DatePickerInnerComponent;
  _text_2:any;
  _el_3:any;
  compView_3:import2.AppView<import14.DayPickerComponent>;
  _DayPickerComponent_3_3:import15.Wrapper_DayPickerComponent;
  _text_4:any;
  _el_5:any;
  compView_5:import2.AppView<import16.MonthPickerComponent>;
  _MonthPickerComponent_5_3:import17.Wrapper_MonthPickerComponent;
  _text_6:any;
  _el_7:any;
  compView_7:import2.AppView<import18.YearPickerComponent>;
  _YearPickerComponent_7_3:import19.Wrapper_YearPickerComponent;
  _text_8:any;
  _text_9:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_DatePickerComponent0,renderType_DatePickerComponent,import6.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._viewQuery_DatePickerInnerComponent_0 = new import11.QueryList<any>();
    this._text_0 = this.renderer.createText(parentRenderNode,'\n    ',(null as any));
    this._el_1 = import3.createRenderElement(this.renderer,parentRenderNode,'datepicker-inner',import3.EMPTY_INLINE_ARRAY,(null as any));
    this.compView_1 = new import13.View_DatePickerInnerComponent0(this.viewUtils,this,1,this._el_1);
    this._DatePickerInnerComponent_1_3 = new import13.Wrapper_DatePickerInnerComponent();
    this._text_2 = this.renderer.createText((null as any),'\n      ',(null as any));
    this._el_3 = import3.createRenderElement(this.renderer,(null as any),'daypicker',new import3.InlineArray2(2,'tabindex','0'),(null as any));
    this.compView_3 = new import15.View_DayPickerComponent0(this.viewUtils,this,3,this._el_3);
    this._DayPickerComponent_3_3 = new import15.Wrapper_DayPickerComponent(this._DatePickerInnerComponent_1_3.context);
    this.compView_3.create(this._DayPickerComponent_3_3.context);
    this._text_4 = this.renderer.createText((null as any),'\n      ',(null as any));
    this._el_5 = import3.createRenderElement(this.renderer,(null as any),'monthpicker',new import3.InlineArray2(2,'tabindex','0'),(null as any));
    this.compView_5 = new import17.View_MonthPickerComponent0(this.viewUtils,this,5,this._el_5);
    this._MonthPickerComponent_5_3 = new import17.Wrapper_MonthPickerComponent(this._DatePickerInnerComponent_1_3.context);
    this.compView_5.create(this._MonthPickerComponent_5_3.context);
    this._text_6 = this.renderer.createText((null as any),'\n      ',(null as any));
    this._el_7 = import3.createRenderElement(this.renderer,(null as any),'yearpicker',new import3.InlineArray2(2,'tabindex','0'),(null as any));
    this.compView_7 = new import19.View_YearPickerComponent0(this.viewUtils,this,7,this._el_7);
    this._YearPickerComponent_7_3 = new import19.Wrapper_YearPickerComponent(this._DatePickerInnerComponent_1_3.context);
    this.compView_7.create(this._YearPickerComponent_7_3.context);
    this._text_8 = this.renderer.createText((null as any),'\n    ',(null as any));
    this.compView_1.create(this._DatePickerInnerComponent_1_3.context);
    this._text_9 = this.renderer.createText(parentRenderNode,'\n    ',(null as any));
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_1,new import3.InlineArray8(6,'update',(null as any),'selectionDone',(null as any),'activeDateChange',(null as any)),this.eventHandler(this.handleEvent_1));
    this._DatePickerInnerComponent_1_3.subscribe(this,this.eventHandler(this.handleEvent_1),true,true,true);
    this._viewQuery_DatePickerInnerComponent_0.reset([this._DatePickerInnerComponent_1_3.context]);
    this.context._datePicker = this._viewQuery_DatePickerInnerComponent_0.first;
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._text_0,
      this._el_1,
      this._text_2,
      this._el_3,
      this._text_4,
      this._el_5,
      this._text_6,
      this._el_7,
      this._text_8,
      this._text_9
    ]
    ),[disposable_0]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import14.DayPickerComponent) && (3 === requestNodeIndex))) { return this._DayPickerComponent_3_3.context; }
    if (((token === import16.MonthPickerComponent) && (5 === requestNodeIndex))) { return this._MonthPickerComponent_5_3.context; }
    if (((token === import18.YearPickerComponent) && (7 === requestNodeIndex))) { return this._YearPickerComponent_7_3.context; }
    if (((token === import12.DatePickerInnerComponent) && ((1 <= requestNodeIndex) && (requestNodeIndex <= 8)))) { return this._DatePickerInnerComponent_1_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_1_0_0:any = this.context.datepickerMode;
    this._DatePickerInnerComponent_1_3.check_datepickerMode(currVal_1_0_0,throwOnChange,false);
    const currVal_1_0_1:any = this.context.startingDay;
    this._DatePickerInnerComponent_1_3.check_startingDay(currVal_1_0_1,throwOnChange,false);
    const currVal_1_0_2:any = this.context.yearRange;
    this._DatePickerInnerComponent_1_3.check_yearRange(currVal_1_0_2,throwOnChange,false);
    const currVal_1_0_3:any = this.context.minDate;
    this._DatePickerInnerComponent_1_3.check_minDate(currVal_1_0_3,throwOnChange,false);
    const currVal_1_0_4:any = this.context.maxDate;
    this._DatePickerInnerComponent_1_3.check_maxDate(currVal_1_0_4,throwOnChange,false);
    const currVal_1_0_5:any = this.context.minMode;
    this._DatePickerInnerComponent_1_3.check_minMode(currVal_1_0_5,throwOnChange,false);
    const currVal_1_0_6:any = this.context.maxMode;
    this._DatePickerInnerComponent_1_3.check_maxMode(currVal_1_0_6,throwOnChange,false);
    const currVal_1_0_7:any = this.context.showWeeks;
    this._DatePickerInnerComponent_1_3.check_showWeeks(currVal_1_0_7,throwOnChange,false);
    const currVal_1_0_8:any = this.context.formatDay;
    this._DatePickerInnerComponent_1_3.check_formatDay(currVal_1_0_8,throwOnChange,false);
    const currVal_1_0_9:any = this.context.formatMonth;
    this._DatePickerInnerComponent_1_3.check_formatMonth(currVal_1_0_9,throwOnChange,false);
    const currVal_1_0_10:any = this.context.formatYear;
    this._DatePickerInnerComponent_1_3.check_formatYear(currVal_1_0_10,throwOnChange,false);
    const currVal_1_0_11:any = this.context.formatDayHeader;
    this._DatePickerInnerComponent_1_3.check_formatDayHeader(currVal_1_0_11,throwOnChange,false);
    const currVal_1_0_12:any = this.context.formatDayTitle;
    this._DatePickerInnerComponent_1_3.check_formatDayTitle(currVal_1_0_12,throwOnChange,false);
    const currVal_1_0_13:any = this.context.formatMonthTitle;
    this._DatePickerInnerComponent_1_3.check_formatMonthTitle(currVal_1_0_13,throwOnChange,false);
    const currVal_1_0_14:any = this.context.onlyCurrentMonth;
    this._DatePickerInnerComponent_1_3.check_onlyCurrentMonth(currVal_1_0_14,throwOnChange,false);
    const currVal_1_0_15:any = this.context.shortcutPropagation;
    this._DatePickerInnerComponent_1_3.check_shortcutPropagation(currVal_1_0_15,throwOnChange,false);
    const currVal_1_0_16:any = this.context.customClass;
    this._DatePickerInnerComponent_1_3.check_customClass(currVal_1_0_16,throwOnChange,false);
    const currVal_1_0_17:any = this.context.monthColLimit;
    this._DatePickerInnerComponent_1_3.check_monthColLimit(currVal_1_0_17,throwOnChange,false);
    const currVal_1_0_18:any = this.context.yearColLimit;
    this._DatePickerInnerComponent_1_3.check_yearColLimit(currVal_1_0_18,throwOnChange,false);
    const currVal_1_0_19:any = this.context.dateDisabled;
    this._DatePickerInnerComponent_1_3.check_dateDisabled(currVal_1_0_19,throwOnChange,false);
    const currVal_1_0_20:any = this.context.initDate;
    this._DatePickerInnerComponent_1_3.check_initDate(currVal_1_0_20,throwOnChange,false);
    const currVal_1_0_21:any = this.context.activeDate;
    this._DatePickerInnerComponent_1_3.check_activeDate(currVal_1_0_21,throwOnChange,false);
    this._DatePickerInnerComponent_1_3.ngDoCheck(this,this._el_1,throwOnChange);
    this._DayPickerComponent_3_3.ngDoCheck(this,this._el_3,throwOnChange);
    this._MonthPickerComponent_5_3.ngDoCheck(this,this._el_5,throwOnChange);
    this._YearPickerComponent_7_3.ngDoCheck(this,this._el_7,throwOnChange);
    this.compView_1.internalDetectChanges(throwOnChange);
    this.compView_3.internalDetectChanges(throwOnChange);
    this.compView_5.internalDetectChanges(throwOnChange);
    this.compView_7.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_1.destroy();
    this.compView_3.destroy();
    this.compView_5.destroy();
    this.compView_7.destroy();
    this._DatePickerInnerComponent_1_3.ngOnDestroy();
  }
  visitProjectableNodesInternal(nodeIndex:number,ngContentIndex:number,cb:any,ctx:any):void {
    if (((nodeIndex == 1) && (ngContentIndex == 0))) {
      cb(this._text_2,ctx);
      cb(this._el_3,ctx);
      cb(this._text_4,ctx);
      cb(this._el_5,ctx);
      cb(this._text_6,ctx);
      cb(this._el_7,ctx);
      cb(this._text_8,ctx);
    }
  }
  handleEvent_1(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'update')) {
      const pd_sub_0:any = ((<any>this.context.onUpdate($event)) !== false);
      result = (pd_sub_0 && result);
    }
    if ((eventName == 'selectionDone')) {
      const pd_sub_1:any = ((<any>this.context.onSelectionDone($event)) !== false);
      result = (pd_sub_1 && result);
    }
    if ((eventName == 'activeDateChange')) {
      const pd_sub_2:any = ((<any>this.context.onActiveDateChange($event)) !== false);
      result = (pd_sub_2 && result);
    }
    return result;
  }
}