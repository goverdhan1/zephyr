/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from 'ng2-bootstrap/accordion/accordion-group.component';
import * as import1 from '@angular/core/src/change_detection/change_detection_util';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/render/api';
import * as import5 from '@angular/core/src/metadata/view';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/change_detection/constants';
import * as import8 from '@angular/core/src/linker/component_factory';
import * as import9 from 'ng2-bootstrap/accordion/accordion.component';
import * as import10 from '../../@angular/common/src/directives/ng_class.ngfactory';
import * as import11 from '@angular/core/src/linker/view_container';
import * as import12 from '@angular/core/src/change_detection/differs/iterable_differs';
import * as import13 from '@angular/core/src/change_detection/differs/keyvalue_differs';
import * as import14 from '@angular/core/src/linker/element_ref';
import * as import15 from '@angular/common/src/directives/ng_class';
import * as import16 from '../../@angular/common/src/directives/ng_if.ngfactory';
import * as import17 from '../collapse/collapse.directive.ngfactory';
import * as import18 from '@angular/core/src/linker/template_ref';
import * as import19 from '@angular/common/src/directives/ng_if';
import * as import20 from 'ng2-bootstrap/collapse/collapse.directive';
export class Wrapper_AccordionPanelComponent {
  /*private*/ _eventHandler:Function;
  context:import0.AccordionPanelComponent;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  /*private*/ _expr_3:any;
  /*private*/ _expr_4:any;
  constructor(p0:any) {
    this._changed = false;
    this.context = new import0.AccordionPanelComponent(p0);
    this._expr_0 = import1.UNINITIALIZED;
    this._expr_1 = import1.UNINITIALIZED;
    this._expr_2 = import1.UNINITIALIZED;
    this._expr_3 = import1.UNINITIALIZED;
    this._expr_4 = import1.UNINITIALIZED;
  }
  ngOnDetach(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    this.context.ngOnDestroy();
  }
  check_heading(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.heading = currValue;
      this._expr_0 = currValue;
    }
  }
  check_panelClass(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.panelClass = currValue;
      this._expr_1 = currValue;
    }
  }
  check_isDisabled(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_2,currValue))) {
      this._changed = true;
      this.context.isDisabled = currValue;
      this._expr_2 = currValue;
    }
  }
  check_isOpen(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_3,currValue))) {
      this._changed = true;
      this.context.isOpen = currValue;
      this._expr_3 = currValue;
    }
  }
  ngDoCheck(view:import2.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    if (!throwOnChange) { if ((view.numberOfChecks === 0)) { this.context.ngOnInit(); } }
    return changed;
  }
  checkHost(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any,throwOnChange:boolean):void {
    const currVal_4:any = this.context.isOpen;
    if (import3.checkBinding(throwOnChange,this._expr_4,currVal_4)) {
      view.renderer.setElementClass(el,'panel-open',currVal_4);
      this._expr_4 = currVal_4;
    }
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import2.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
var renderType_AccordionPanelComponent_Host:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,([] as any[]),{});
class View_AccordionPanelComponent_Host0 extends import2.AppView<any> {
  _el_0:any;
  compView_0:import2.AppView<import0.AccordionPanelComponent>;
  _AccordionPanelComponent_0_3:Wrapper_AccordionPanelComponent;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_AccordionPanelComponent_Host0,renderType_AccordionPanelComponent_Host,import6.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'accordion-group',import3.EMPTY_INLINE_ARRAY,rootSelector,(null as any));
    this.compView_0 = new View_AccordionPanelComponent0(this.viewUtils,this,0,this._el_0);
    this._AccordionPanelComponent_0_3 = new Wrapper_AccordionPanelComponent(this.injectorGet(import9.AccordionComponent,this.parentIndex));
    this.compView_0.create(this._AccordionPanelComponent_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import8.ComponentRef_<any>(0,this,this._el_0,this._AccordionPanelComponent_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.AccordionPanelComponent) && (0 === requestNodeIndex))) { return this._AccordionPanelComponent_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._AccordionPanelComponent_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this._AccordionPanelComponent_0_3.checkHost(this,this.compView_0,this._el_0,throwOnChange);
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
    this._AccordionPanelComponent_0_3.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  visitProjectableNodesInternal(nodeIndex:number,ngContentIndex:number,cb:any,ctx:any):void {
    if (((nodeIndex == 0) && (ngContentIndex == 0))) {  }
    if (((nodeIndex == 0) && (ngContentIndex == 1))) {  }
  }
}
export const AccordionPanelComponentNgFactory:import8.ComponentFactory<import0.AccordionPanelComponent> = new import8.ComponentFactory<import0.AccordionPanelComponent>('accordion-group, accordion-panel',View_AccordionPanelComponent_Host0,import0.AccordionPanelComponent);
const styles_AccordionPanelComponent:any[] = ([] as any[]);
class View_AccordionPanelComponent1 extends import2.AppView<any> {
  _el_0:any;
  _NgClass_0_3:import10.Wrapper_NgClass;
  _text_1:any;
  _map_3:any;
  /*private*/ _expr_4:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any,declaredViewContainer:import11.ViewContainer) {
    super(View_AccordionPanelComponent1,renderType_AccordionPanelComponent,import6.ViewType.EMBEDDED,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways,declaredViewContainer);
    this._map_3 = import3.pureProxy1((p0:any):{[key: string]:any} => {
      return {'text-muted': p0};
    });
    this._expr_4 = import1.UNINITIALIZED;
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    this._el_0 = import3.createRenderElement(this.renderer,(null as any),'div',import3.EMPTY_INLINE_ARRAY,(null as any));
    this._NgClass_0_3 = new import10.Wrapper_NgClass(this.parentView.parentView.injectorGet(import12.IterableDiffers,this.parentView.parentIndex),this.parentView.parentView.injectorGet(import13.KeyValueDiffers,this.parentView.parentIndex),new import14.ElementRef(this._el_0),this.renderer);
    this._text_1 = this.renderer.createText(this._el_0,'',(null as any));
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._text_1
    ]
    ),(null as any));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import15.NgClass) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 1)))) { return this._NgClass_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_0_0_0:any = this._map_3(this.parentView.context.isDisabled);
    this._NgClass_0_3.check_ngClass(currVal_0_0_0,throwOnChange,false);
    this._NgClass_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    const currVal_4:any = import3.inlineInterpolate(1,'',this.parentView.context.heading,'');
    if (import3.checkBinding(throwOnChange,this._expr_4,currVal_4)) {
      this.renderer.setText(this._text_1,currVal_4);
      this._expr_4 = currVal_4;
    }
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
var renderType_AccordionPanelComponent:import4.RenderComponentType = import3.createRenderComponentType('',2,import5.ViewEncapsulation.None,styles_AccordionPanelComponent,{});
export class View_AccordionPanelComponent0 extends import2.AppView<import0.AccordionPanelComponent> {
  _text_0:any;
  _el_1:any;
  _NgClass_1_3:import10.Wrapper_NgClass;
  _text_2:any;
  _el_3:any;
  _text_4:any;
  _el_5:any;
  _text_6:any;
  _el_7:any;
  _text_8:any;
  _anchor_9:any;
  /*private*/ _vc_9:import11.ViewContainer;
  _TemplateRef_9_5:any;
  _NgIf_9_6:import16.Wrapper_NgIf;
  _text_10:any;
  _text_11:any;
  _text_12:any;
  _text_13:any;
  _text_14:any;
  _el_15:any;
  _CollapseDirective_15_3:import17.Wrapper_CollapseDirective;
  _text_16:any;
  _el_17:any;
  _text_18:any;
  _text_19:any;
  _text_20:any;
  _text_21:any;
  _text_22:any;
  /*private*/ _expr_28:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_AccordionPanelComponent0,renderType_AccordionPanelComponent,import6.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways);
    this._expr_28 = import1.UNINITIALIZED;
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._text_0 = this.renderer.createText(parentRenderNode,'\n',(null as any));
    this._el_1 = import3.createRenderElement(this.renderer,parentRenderNode,'div',new import3.InlineArray2(2,'class','panel card'),(null as any));
    this._NgClass_1_3 = new import10.Wrapper_NgClass(this.parentView.injectorGet(import12.IterableDiffers,this.parentIndex),this.parentView.injectorGet(import13.KeyValueDiffers,this.parentIndex),new import14.ElementRef(this._el_1),this.renderer);
    this._text_2 = this.renderer.createText(this._el_1,'\n  ',(null as any));
    this._el_3 = import3.createRenderElement(this.renderer,this._el_1,'div',new import3.InlineArray4(4,'class','panel-heading card-header','role','tab'),(null as any));
    this._text_4 = this.renderer.createText(this._el_3,'\n    ',(null as any));
    this._el_5 = import3.createRenderElement(this.renderer,this._el_3,'div',new import3.InlineArray2(2,'class','panel-title card-title'),(null as any));
    this._text_6 = this.renderer.createText(this._el_5,'\n      ',(null as any));
    this._el_7 = import3.createRenderElement(this.renderer,this._el_5,'div',new import3.InlineArray4(4,'class','accordion-toggle','role','button'),(null as any));
    this._text_8 = this.renderer.createText(this._el_7,'\n        ',(null as any));
    this._anchor_9 = this.renderer.createTemplateAnchor(this._el_7,(null as any));
    this._vc_9 = new import11.ViewContainer(9,7,this,this._anchor_9);
    this._TemplateRef_9_5 = new import18.TemplateRef_(this,9,this._anchor_9);
    this._NgIf_9_6 = new import16.Wrapper_NgIf(this._vc_9.vcRef,this._TemplateRef_9_5);
    this._text_10 = this.renderer.createText(this._el_7,'\n        ',(null as any));
    this.projectNodes(this._el_7,0);
    this._text_11 = this.renderer.createText(this._el_7,'\n      ',(null as any));
    this._text_12 = this.renderer.createText(this._el_5,'\n    ',(null as any));
    this._text_13 = this.renderer.createText(this._el_3,'\n  ',(null as any));
    this._text_14 = this.renderer.createText(this._el_1,'\n  ',(null as any));
    this._el_15 = import3.createRenderElement(this.renderer,this._el_1,'div',new import3.InlineArray4(4,'class','panel-collapse collapse','role','tabpanel'),(null as any));
    this._CollapseDirective_15_3 = new import17.Wrapper_CollapseDirective(new import14.ElementRef(this._el_15),this.renderer);
    this._text_16 = this.renderer.createText(this._el_15,'\n    ',(null as any));
    this._el_17 = import3.createRenderElement(this.renderer,this._el_15,'div',new import3.InlineArray2(2,'class','panel-body card-block'),(null as any));
    this._text_18 = this.renderer.createText(this._el_17,'\n      ',(null as any));
    this.projectNodes(this._el_17,1);
    this._text_19 = this.renderer.createText(this._el_17,'\n    ',(null as any));
    this._text_20 = this.renderer.createText(this._el_15,'\n  ',(null as any));
    this._text_21 = this.renderer.createText(this._el_1,'\n',(null as any));
    this._text_22 = this.renderer.createText(parentRenderNode,'\n  ',(null as any));
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_3,new import3.InlineArray2(2,'click',(null as any)),this.eventHandler(this.handleEvent_3));
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._text_0,
      this._el_1,
      this._text_2,
      this._el_3,
      this._text_4,
      this._el_5,
      this._text_6,
      this._el_7,
      this._text_8,
      this._anchor_9,
      this._text_10,
      this._text_11,
      this._text_12,
      this._text_13,
      this._text_14,
      this._el_15,
      this._text_16,
      this._el_17,
      this._text_18,
      this._text_19,
      this._text_20,
      this._text_21,
      this._text_22
    ]
    ),[disposable_0]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import18.TemplateRef) && (9 === requestNodeIndex))) { return this._TemplateRef_9_5; }
    if (((token === import19.NgIf) && (9 === requestNodeIndex))) { return this._NgIf_9_6.context; }
    if (((token === import20.CollapseDirective) && ((15 <= requestNodeIndex) && (requestNodeIndex <= 20)))) { return this._CollapseDirective_15_3.context; }
    if (((token === import15.NgClass) && ((1 <= requestNodeIndex) && (requestNodeIndex <= 21)))) { return this._NgClass_1_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_1_0_0:any = 'panel card';
    this._NgClass_1_3.check_klass(currVal_1_0_0,throwOnChange,false);
    const currVal_1_0_1:any = this.context.panelClass;
    this._NgClass_1_3.check_ngClass(currVal_1_0_1,throwOnChange,false);
    this._NgClass_1_3.ngDoCheck(this,this._el_1,throwOnChange);
    const currVal_9_0_0:any = this.context.heading;
    this._NgIf_9_6.check_ngIf(currVal_9_0_0,throwOnChange,false);
    this._NgIf_9_6.ngDoCheck(this,this._anchor_9,throwOnChange);
    const currVal_15_0_0:boolean = !this.context.isOpen;
    this._CollapseDirective_15_3.check_collapse(currVal_15_0_0,throwOnChange,false);
    this._CollapseDirective_15_3.ngDoCheck(this,this._el_15,throwOnChange);
    this._vc_9.detectChangesInNestedViews(throwOnChange);
    const currVal_28:any = this.context.isOpen;
    if (import3.checkBinding(throwOnChange,this._expr_28,currVal_28)) {
      this.renderer.setElementAttribute(this._el_7,'aria-expanded',((currVal_28 == null)? (null as any): currVal_28.toString()));
      this._expr_28 = currVal_28;
    }
    this._CollapseDirective_15_3.checkHost(this,this,this._el_15,throwOnChange);
  }
  destroyInternal():void {
    this._vc_9.destroyNestedViews();
    this._CollapseDirective_15_3.ngOnDestroy();
  }
  createEmbeddedViewInternal(nodeIndex:number):import2.AppView<any> {
    if ((nodeIndex == 9)) { return new View_AccordionPanelComponent1(this.viewUtils,this,9,this._anchor_9,this._vc_9); }
    return (null as any);
  }
  handleEvent_3(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'click')) {
      const pd_sub_0:any = ((<any>this.context.toggleOpen($event)) !== false);
      result = (pd_sub_0 && result);
    }
    return result;
  }
}