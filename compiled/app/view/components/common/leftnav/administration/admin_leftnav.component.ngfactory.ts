/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '../../../../../../../app/view/components/common/leftnav/administration/admin_leftnav.component';
import * as import1 from '@angular/core/src/change_detection/change_detection_util';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/render/api';
import * as import5 from '@angular/core/src/metadata/view';
import * as import6 from '../../../../../../../app/actions/leftnav.action';
import * as import7 from '@angular/core/src/linker/view_type';
import * as import8 from '@angular/core/src/change_detection/constants';
import * as import9 from '@angular/core/src/linker/component_factory';
import * as import10 from '@angular/router/src/router_state';
import * as import11 from '@angular/router/src/router';
import * as import12 from '../../../../../../../app/actions/user.action';
import * as import13 from '../../../../../../../app/view/components/common/leftnav/leftnav.component';
import * as import14 from '../../../../../../../app/actions/project.action';
import * as import15 from '../../../../../../../app/actions/global.action';
import * as import16 from '../leftnav.component.ngfactory';
import * as import17 from '@angular/http/src/http';
import * as import18 from '../../../../../../../app/actions/admin.action';
import * as import19 from '../../../../../../../app/actions/release.action';
import * as import20 from '@angular/core/src/linker/element_ref';
export class Wrapper_AdminLeftNavComponent {
  /*private*/ _eventHandler:Function;
  context:import0.AdminLeftNavComponent;
  /*private*/ _changed:boolean;
  /*private*/ _changes:{[key: string]:any};
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  constructor(p0:any,p1:any,p2:any,p3:any) {
    this._changed = false;
    this._changes = {};
    this.context = new import0.AdminLeftNavComponent(p0,p1,p2,p3);
    this._expr_0 = import1.UNINITIALIZED;
    this._expr_1 = import1.UNINITIALIZED;
    this._expr_2 = import1.UNINITIALIZED;
  }
  ngOnDetach(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    this.context.ngOnDestroy();
  }
  check_activeGroupKey(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.activeGroupKey = currValue;
      this._changes['activeGroupKey'] = new import1.SimpleChange(this._expr_0,currValue);
      this._expr_0 = currValue;
    }
  }
  check_activeItemKey(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.activeItemKey = currValue;
      this._changes['activeItemKey'] = new import1.SimpleChange(this._expr_1,currValue);
      this._expr_1 = currValue;
    }
  }
  check_hideSubHeader(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_2,currValue))) {
      this._changed = true;
      this.context.hideSubHeader = currValue;
      this._changes['hideSubHeader'] = new import1.SimpleChange(this._expr_2,currValue);
      this._expr_2 = currValue;
    }
  }
  ngDoCheck(view:import2.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    if (!throwOnChange) { if (changed) {
      this.context.ngOnChanges(this._changes);
      this._changes = {};
    } }
    return changed;
  }
  checkHost(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import2.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
var renderType_AdminLeftNavComponent_Host:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,([] as any[]),{});
class View_AdminLeftNavComponent_Host0 extends import2.AppView<any> {
  _el_0:any;
  compView_0:import2.AppView<import0.AdminLeftNavComponent>;
  _LeftnavAction_0_3:import6.LeftnavAction;
  _AdminLeftNavComponent_0_4:Wrapper_AdminLeftNavComponent;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_AdminLeftNavComponent_Host0,renderType_AdminLeftNavComponent_Host,import7.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import8.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import9.ComponentRef<any> {
    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'zui-administration-left-nav',import3.EMPTY_INLINE_ARRAY,rootSelector,(null as any));
    this.compView_0 = new View_AdminLeftNavComponent0(this.viewUtils,this,0,this._el_0);
    this._LeftnavAction_0_3 = new import6.LeftnavAction();
    this._AdminLeftNavComponent_0_4 = new Wrapper_AdminLeftNavComponent(this.injectorGet(import10.ActivatedRoute,this.parentIndex),this.injectorGet(import11.Router,this.parentIndex),this._LeftnavAction_0_3,this.injectorGet(import12.UserAction,this.parentIndex));
    this.compView_0.create(this._AdminLeftNavComponent_0_4.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import9.ComponentRef_<any>(0,this,this._el_0,this._AdminLeftNavComponent_0_4.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import6.LeftnavAction) && (0 === requestNodeIndex))) { return this._LeftnavAction_0_3; }
    if (((token === import0.AdminLeftNavComponent) && (0 === requestNodeIndex))) { return this._AdminLeftNavComponent_0_4.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._AdminLeftNavComponent_0_4.ngDoCheck(this,this._el_0,throwOnChange);
    this.compView_0.internalDetectChanges(throwOnChange);
    if (!throwOnChange) { if ((this.numberOfChecks === 0)) { this._AdminLeftNavComponent_0_4.context.ngAfterViewInit(); } }
  }
  destroyInternal():void {
    this.compView_0.destroy();
    this._AdminLeftNavComponent_0_4.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
export const AdminLeftNavComponentNgFactory:import9.ComponentFactory<import0.AdminLeftNavComponent> = new import9.ComponentFactory<import0.AdminLeftNavComponent>('zui-administration-left-nav',View_AdminLeftNavComponent_Host0,import0.AdminLeftNavComponent);
const styles_AdminLeftNavComponent:any[] = ([] as any[]);
var renderType_AdminLeftNavComponent:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,styles_AdminLeftNavComponent,{});
export class View_AdminLeftNavComponent0 extends import2.AppView<import0.AdminLeftNavComponent> {
  _el_0:any;
  compView_0:import2.AppView<import13.LeftNavComponent>;
  _ProjectAction_0_3:import14.ProjectAction;
  _GlobalAction_0_4:import15.GlobalAction;
  _LeftNavComponent_0_5:import16.Wrapper_LeftNavComponent;
  _text_1:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_AdminLeftNavComponent0,renderType_AdminLeftNavComponent,import7.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import8.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import9.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._el_0 = import3.createRenderElement(this.renderer,parentRenderNode,'left-nav',import3.EMPTY_INLINE_ARRAY,(null as any));
    this.compView_0 = new import16.View_LeftNavComponent0(this.viewUtils,this,0,this._el_0);
    this._ProjectAction_0_3 = new import14.ProjectAction(this.parentView.injectorGet(import17.Http,this.parentIndex),this.parentView.injectorGet(import18.AdminAction,this.parentIndex),this.parentView.injectorGet(import19.ReleaseAction,this.parentIndex));
    this._GlobalAction_0_4 = new import15.GlobalAction(this.parentView.injectorGet(import17.Http,this.parentIndex));
    this._LeftNavComponent_0_5 = new import16.Wrapper_LeftNavComponent(new import20.ElementRef(this._el_0),this.parentView.injectorGet(import11.Router,this.parentIndex),this._ProjectAction_0_3,this._GlobalAction_0_4);
    this.compView_0.create(this._LeftNavComponent_0_5.context);
    this._text_1 = this.renderer.createText(parentRenderNode,'\n',(null as any));
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_0,new import3.InlineArray2(2,'onNavigateByURL',(null as any)),this.eventHandler(this.handleEvent_0));
    this._LeftNavComponent_0_5.subscribe(this,this.eventHandler(this.handleEvent_0),false,false,true);
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._text_1
    ]
    ),[disposable_0]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import14.ProjectAction) && (0 === requestNodeIndex))) { return this._ProjectAction_0_3; }
    if (((token === import15.GlobalAction) && (0 === requestNodeIndex))) { return this._GlobalAction_0_4; }
    if (((token === import13.LeftNavComponent) && (0 === requestNodeIndex))) { return this._LeftNavComponent_0_5.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_0_0_0:any = this.context.column;
    this._LeftNavComponent_0_5.check_columns(currVal_0_0_0,throwOnChange,false);
    const currVal_0_0_1:any = this.context.activeItemKey;
    this._LeftNavComponent_0_5.check_activeItemKey(currVal_0_0_1,throwOnChange,false);
    this._LeftNavComponent_0_5.ngDoCheck(this,this._el_0,throwOnChange);
    if (!throwOnChange) { this._LeftNavComponent_0_5.context.ngAfterContentChecked(); }
    this.compView_0.internalDetectChanges(throwOnChange);
    if (!throwOnChange) { if ((this.numberOfChecks === 0)) { this._LeftNavComponent_0_5.context.ngAfterViewInit(); } }
  }
  destroyInternal():void {
    this.compView_0.destroy();
    this._LeftNavComponent_0_5.ngOnDestroy();
  }
  handleEvent_0(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'onNavigateByURL')) {
      const pd_sub_0:any = ((<any>this.context.navigateToLink($event)) !== false);
      result = (pd_sub_0 && result);
    }
    return result;
  }
}