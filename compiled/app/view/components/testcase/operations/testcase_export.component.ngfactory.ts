/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '../../../../../../app/view/components/testcase/operations/testcase_export.component';
import * as import1 from '@angular/core/src/change_detection/change_detection_util';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/render/api';
import * as import5 from '@angular/core/src/metadata/view';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/change_detection/constants';
import * as import8 from '@angular/core/src/linker/component_factory';
import * as import9 from '@angular/core/src/linker/query_list';
import * as import10 from '../../../../../../app/view/components/common/export/export.component';
import * as import11 from '../../../../../../app/actions/report.action';
import * as import12 from '../../../../../../app/actions/admin.action';
import * as import13 from '../../common/export/export.component.ngfactory';
import * as import14 from '@angular/http/src/http';
import * as import15 from '../../../../../../app/services/pouch.db.service';
export class Wrapper_TestcaseExportComponent {
  /*private*/ _eventHandler:Function;
  context:import0.TestcaseExportComponent;
  /*private*/ _changed:boolean;
  /*private*/ _changes:{[key: string]:any};
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  /*private*/ _expr_3:any;
  /*private*/ _expr_4:any;
  /*private*/ _expr_5:any;
  /*private*/ _expr_6:any;
  /*private*/ _expr_7:any;
  /*private*/ _expr_8:any;
  constructor() {
    this._changed = false;
    this._changes = {};
    this.context = new import0.TestcaseExportComponent();
    this._expr_0 = import1.UNINITIALIZED;
    this._expr_1 = import1.UNINITIALIZED;
    this._expr_2 = import1.UNINITIALIZED;
    this._expr_3 = import1.UNINITIALIZED;
    this._expr_4 = import1.UNINITIALIZED;
    this._expr_5 = import1.UNINITIALIZED;
    this._expr_6 = import1.UNINITIALIZED;
    this._expr_7 = import1.UNINITIALIZED;
    this._expr_8 = import1.UNINITIALIZED;
  }
  ngOnDetach(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  check_fieldOptions(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.fieldOptions = currValue;
      this._changes['fieldOptions'] = new import1.SimpleChange(this._expr_0,currValue);
      this._expr_0 = currValue;
    }
  }
  check_testcaseIds(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.testcaseIds = currValue;
      this._changes['testcaseIds'] = new import1.SimpleChange(this._expr_1,currValue);
      this._expr_1 = currValue;
    }
  }
  check_tcrCatalogTreeId(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_2,currValue))) {
      this._changed = true;
      this.context.tcrCatalogTreeId = currValue;
      this._changes['tcrCatalogTreeId'] = new import1.SimpleChange(this._expr_2,currValue);
      this._expr_2 = currValue;
    }
  }
  check_isDisabled(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_3,currValue))) {
      this._changed = true;
      this.context.isDisabled = currValue;
      this._changes['isDisabled'] = new import1.SimpleChange(this._expr_3,currValue);
      this._expr_3 = currValue;
    }
  }
  check_releaseId(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_4,currValue))) {
      this._changed = true;
      this.context.releaseId = currValue;
      this._changes['releaseId'] = new import1.SimpleChange(this._expr_4,currValue);
      this._expr_4 = currValue;
    }
  }
  check_isSearchView(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_5,currValue))) {
      this._changed = true;
      this.context.isSearchView = currValue;
      this._changes['isSearchView'] = new import1.SimpleChange(this._expr_5,currValue);
      this._expr_5 = currValue;
    }
  }
  check_isAdvancedSearch(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_6,currValue))) {
      this._changed = true;
      this.context.isAdvancedSearch = currValue;
      this._changes['isAdvancedSearch'] = new import1.SimpleChange(this._expr_6,currValue);
      this._expr_6 = currValue;
    }
  }
  check_searchText(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_7,currValue))) {
      this._changed = true;
      this.context.searchText = currValue;
      this._changes['searchText'] = new import1.SimpleChange(this._expr_7,currValue);
      this._expr_7 = currValue;
    }
  }
  check_inRelease(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_8,currValue))) {
      this._changed = true;
      this.context.inRelease = currValue;
      this._changes['inRelease'] = new import1.SimpleChange(this._expr_8,currValue);
      this._expr_8 = currValue;
    }
  }
  ngDoCheck(view:import2.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    if (!throwOnChange) { if (changed) {
      this.context.ngOnChanges(this._changes);
      this._changes = {};
    } }
    return changed;
  }
  checkHost(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import2.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
var renderType_TestcaseExportComponent_Host:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,([] as any[]),{});
class View_TestcaseExportComponent_Host0 extends import2.AppView<any> {
  _el_0:any;
  compView_0:import2.AppView<import0.TestcaseExportComponent>;
  _TestcaseExportComponent_0_3:Wrapper_TestcaseExportComponent;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_TestcaseExportComponent_Host0,renderType_TestcaseExportComponent_Host,import6.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'zee-export-dialog',import3.EMPTY_INLINE_ARRAY,rootSelector,(null as any));
    this.compView_0 = new View_TestcaseExportComponent0(this.viewUtils,this,0,this._el_0);
    this._TestcaseExportComponent_0_3 = new Wrapper_TestcaseExportComponent();
    this.compView_0.create(this._TestcaseExportComponent_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import8.ComponentRef_<any>(0,this,this._el_0,this._TestcaseExportComponent_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.TestcaseExportComponent) && (0 === requestNodeIndex))) { return this._TestcaseExportComponent_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._TestcaseExportComponent_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this.compView_0.internalDetectChanges(throwOnChange);
    if (!throwOnChange) { if ((this.numberOfChecks === 0)) { this._TestcaseExportComponent_0_3.context.ngAfterViewInit(); } }
  }
  destroyInternal():void {
    this.compView_0.destroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
export const TestcaseExportComponentNgFactory:import8.ComponentFactory<import0.TestcaseExportComponent> = new import8.ComponentFactory<import0.TestcaseExportComponent>('zee-export-dialog',View_TestcaseExportComponent_Host0,import0.TestcaseExportComponent);
const styles_TestcaseExportComponent:any[] = ([] as any[]);
var renderType_TestcaseExportComponent:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,styles_TestcaseExportComponent,{});
export class View_TestcaseExportComponent0 extends import2.AppView<import0.TestcaseExportComponent> {
  _viewQuery_ExportComponent_0:import9.QueryList<any>;
  _text_0:any;
  _el_1:any;
  _text_2:any;
  _text_3:any;
  _el_4:any;
  compView_4:import2.AppView<import10.ExportComponent>;
  _ReportAction_4_3:import11.ReportAction;
  _AdminAction_4_4:import12.AdminAction;
  _ExportComponent_4_5:import13.Wrapper_ExportComponent;
  _text_5:any;
  /*private*/ _expr_11:any;
  /*private*/ _expr_12:any;
  /*private*/ _expr_13:any;
  /*private*/ _expr_14:any;
  /*private*/ _expr_15:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_TestcaseExportComponent0,renderType_TestcaseExportComponent,import6.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways);
    this._expr_11 = import1.UNINITIALIZED;
    this._expr_12 = import1.UNINITIALIZED;
    this._expr_13 = import1.UNINITIALIZED;
    this._expr_14 = import1.UNINITIALIZED;
    this._expr_15 = import1.UNINITIALIZED;
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._viewQuery_ExportComponent_0 = new import9.QueryList<any>();
    this._text_0 = this.renderer.createText(parentRenderNode,'\n        ',(null as any));
    this._el_1 = import3.createRenderElement(this.renderer,parentRenderNode,'button',new import3.InlineArray4(4,'data-toggle','modal','type','button'),(null as any));
    this._text_2 = this.renderer.createText(this._el_1,'',(null as any));
    this._text_3 = this.renderer.createText(parentRenderNode,'\n        ',(null as any));
    this._el_4 = import3.createRenderElement(this.renderer,parentRenderNode,'zui-export',import3.EMPTY_INLINE_ARRAY,(null as any));
    this.compView_4 = new import13.View_ExportComponent0(this.viewUtils,this,4,this._el_4);
    this._ReportAction_4_3 = new import11.ReportAction(this.parentView.injectorGet(import14.Http,this.parentIndex));
    this._AdminAction_4_4 = new import12.AdminAction(this.parentView.injectorGet(import14.Http,this.parentIndex),this.parentView.injectorGet(import15.PouchDBPrefsServices,this.parentIndex));
    this._ExportComponent_4_5 = new import13.Wrapper_ExportComponent(this._ReportAction_4_3,this._AdminAction_4_4,this.compView_4.ref);
    this.compView_4.create(this._ExportComponent_4_5.context);
    this._text_5 = this.renderer.createText(parentRenderNode,'\n    ',(null as any));
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_1,new import3.InlineArray2(2,'click',(null as any)),this.eventHandler(this.handleEvent_1));
    this._viewQuery_ExportComponent_0.reset([this._ExportComponent_4_5.context]);
    this.context.exportUI = this._viewQuery_ExportComponent_0.first;
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._text_0,
      this._el_1,
      this._text_2,
      this._text_3,
      this._el_4,
      this._text_5
    ]
    ),[disposable_0]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import11.ReportAction) && (4 === requestNodeIndex))) { return this._ReportAction_4_3; }
    if (((token === import12.AdminAction) && (4 === requestNodeIndex))) { return this._AdminAction_4_4; }
    if (((token === import10.ExportComponent) && (4 === requestNodeIndex))) { return this._ExportComponent_4_5.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_4_0_0:any = this.context.fieldOptions;
    this._ExportComponent_4_5.check_fieldOptions(currVal_4_0_0,throwOnChange,false);
    const currVal_4_0_1:any = this.context.isSearchView;
    this._ExportComponent_4_5.check_isSearchView(currVal_4_0_1,throwOnChange,false);
    if (this._ExportComponent_4_5.ngDoCheck(this,this._el_4,throwOnChange)) { this.compView_4.markAsCheckOnce(); }
    const currVal_11:any = 'zui-btn zui-btn-tertiary';
    if (import3.checkBinding(throwOnChange,this._expr_11,currVal_11)) {
      this.renderer.setElementProperty(this._el_1,'className',currVal_11);
      this._expr_11 = currVal_11;
    }
    const currVal_12:any = this.context.disableButton();
    if (import3.checkBinding(throwOnChange,this._expr_12,currVal_12)) {
      this.renderer.setElementProperty(this._el_1,'disabled',currVal_12);
      this._expr_12 = currVal_12;
    }
    const currVal_13:any = import3.inlineInterpolate(1,'zui-export-modal-trigger-',this.context.fieldOptions.id,'');
    if (import3.checkBinding(throwOnChange,this._expr_13,currVal_13)) {
      this.renderer.setElementProperty(this._el_1,'id',currVal_13);
      this._expr_13 = currVal_13;
    }
    const currVal_14:any = ('#zui-export-modal-' + this.context.fieldOptions.id);
    if (import3.checkBinding(throwOnChange,this._expr_14,currVal_14)) {
      this.renderer.setElementAttribute(this._el_1,'data-target',((currVal_14 == null)? (null as any): currVal_14.toString()));
      this._expr_14 = currVal_14;
    }
    const currVal_15:any = import3.inlineInterpolate(1,'',this.context.fieldOptions.header,'');
    if (import3.checkBinding(throwOnChange,this._expr_15,currVal_15)) {
      this.renderer.setText(this._text_2,currVal_15);
      this._expr_15 = currVal_15;
    }
    this.compView_4.internalDetectChanges(throwOnChange);
    if (!throwOnChange) { if ((this.numberOfChecks === 0)) { this._ExportComponent_4_5.context.ngAfterViewInit(); } }
  }
  destroyInternal():void {
    this.compView_4.destroy();
    this._ExportComponent_4_5.ngOnDestroy();
  }
  handleEvent_1(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'click')) {
      const pd_sub_0:any = ((<any>this.context.onTiggerExport()) !== false);
      result = (pd_sub_0 && result);
    }
    return result;
  }
}