/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '../../../../../../../app/view/components/testcase-eas/phase/phase_grid/phase_grid.component';
import * as import1 from '@angular/core/src/change_detection/change_detection_util';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/render/api';
import * as import5 from '@angular/core/src/metadata/view';
import * as import6 from '../../../../../../../app/actions/testcaseEAS.action';
import * as import7 from '../../../../../../../app/actions/grid.action';
import * as import8 from '@angular/core/src/linker/view_type';
import * as import9 from '@angular/core/src/change_detection/constants';
import * as import10 from '@angular/core/src/linker/component_factory';
import * as import11 from '@angular/http/src/http';
import * as import12 from '../../../../../../../app/services/pouch.db.service';
import * as import13 from '@angular/core/src/linker/view_container';
import * as import14 from '../../../../../../../app/view/components/common/modal/modal.component';
import * as import15 from '../../../common/modal/modal.component.ngfactory';
import * as import16 from '../../../../../../node_modules/@angular/common/src/directives/ng_if.ngfactory';
import * as import17 from '@angular/core/src/linker/element_ref';
import * as import18 from '@angular/core/src/linker/template_ref';
import * as import19 from '@angular/common/src/directives/ng_if';
import * as import20 from '../../../../../../../app/view/components/grid/grid.component';
import * as import21 from '../../../../../../../app/actions/global.action';
import * as import22 from '../../../../../../../app/utils/scripts/utils';
import * as import23 from '../../../grid/grid.component.ngfactory';
import * as import24 from '@angular/core/src/zone/ng_zone';
import * as import25 from '@angular/router/src/router';
import * as import26 from '../../../../../../../app/services/toastr.service';
export class Wrapper_TestcaseEASPhaseGridComponent {
  /*private*/ _eventHandler:Function;
  context:import0.TestcaseEASPhaseGridComponent;
  /*private*/ _changed:boolean;
  /*private*/ _changes:{[key: string]:any};
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  /*private*/ _expr_3:any;
  /*private*/ _expr_4:any;
  /*private*/ _expr_5:any;
  /*private*/ _expr_6:any;
  subscription0:any;
  subscription1:any;
  subscription2:any;
  subscription3:any;
  subscription4:any;
  constructor(p0:any,p1:any,p2:any) {
    this._changed = false;
    this._changes = {};
    this.context = new import0.TestcaseEASPhaseGridComponent(p0,p1,p2);
    this._expr_0 = import1.UNINITIALIZED;
    this._expr_1 = import1.UNINITIALIZED;
    this._expr_2 = import1.UNINITIALIZED;
    this._expr_3 = import1.UNINITIALIZED;
    this._expr_4 = import1.UNINITIALIZED;
    this._expr_5 = import1.UNINITIALIZED;
    this._expr_6 = import1.UNINITIALIZED;
  }
  ngOnDetach(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    this.context.ngOnDestroy();
    (this.subscription0 && this.subscription0.unsubscribe());
    (this.subscription1 && this.subscription1.unsubscribe());
    (this.subscription2 && this.subscription2.unsubscribe());
    (this.subscription3 && this.subscription3.unsubscribe());
    (this.subscription4 && this.subscription4.unsubscribe());
  }
  check_selectedTctIds(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.selectedTctIds = currValue;
      this._changes['selectedTctIds'] = new import1.SimpleChange(this._expr_0,currValue);
      this._expr_0 = currValue;
    }
  }
  check_selectedTreeNode(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.selectedTreeNode = currValue;
      this._changes['selectedTreeNode'] = new import1.SimpleChange(this._expr_1,currValue);
      this._expr_1 = currValue;
    }
  }
  check_phaseTreeId(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_2,currValue))) {
      this._changed = true;
      this.context.phaseTreeId = currValue;
      this._changes['phaseTreeId'] = new import1.SimpleChange(this._expr_2,currValue);
      this._expr_2 = currValue;
    }
  }
  check_bubblePagination(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_3,currValue))) {
      this._changed = true;
      this.context.bubblePagination = currValue;
      this._changes['bubblePagination'] = new import1.SimpleChange(this._expr_3,currValue);
      this._expr_3 = currValue;
    }
  }
  check_keyOnRowSelect(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_4,currValue))) {
      this._changed = true;
      this.context.keyOnRowSelect = currValue;
      this._changes['keyOnRowSelect'] = new import1.SimpleChange(this._expr_4,currValue);
      this._expr_4 = currValue;
    }
  }
  check_gridType(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_5,currValue))) {
      this._changed = true;
      this.context.gridType = currValue;
      this._changes['gridType'] = new import1.SimpleChange(this._expr_5,currValue);
      this._expr_5 = currValue;
    }
  }
  check_keyToCheck(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_6,currValue))) {
      this._changed = true;
      this.context.keyToCheck = currValue;
      this._changes['keyToCheck'] = new import1.SimpleChange(this._expr_6,currValue);
      this._expr_6 = currValue;
    }
  }
  ngDoCheck(view:import2.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    if (!throwOnChange) { if (changed) {
      this.context.ngOnChanges(this._changes);
      this._changes = {};
    } }
    return changed;
  }
  checkHost(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import2.AppView<any>,_eventHandler:any,emit0:boolean,emit1:boolean,emit2:boolean,emit3:boolean,emit4:boolean):void {
    this._eventHandler = _eventHandler;
    if (emit0) { (this.subscription0 = this.context.onClearSelectedTctIds.subscribe(_eventHandler.bind(view,'onClearSelectedTctIds'))); }
    if (emit1) { (this.subscription1 = this.context.onPhaseGridRowClick.subscribe(_eventHandler.bind(view,'onPhaseGridRowClick'))); }
    if (emit2) { (this.subscription2 = this.context.onPhaseGridRowSelection.subscribe(_eventHandler.bind(view,'onPhaseGridRowSelection'))); }
    if (emit3) { (this.subscription3 = this.context.onPhaseGridPageChange.subscribe(_eventHandler.bind(view,'onPhaseGridPageChange'))); }
    if (emit4) { (this.subscription4 = this.context.onPhaseGridPageSizeChange.subscribe(_eventHandler.bind(view,'onPhaseGridPageSizeChange'))); }
  }
}
var renderType_TestcaseEASPhaseGridComponent_Host:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,([] as any[]),{});
class View_TestcaseEASPhaseGridComponent_Host0 extends import2.AppView<any> {
  _el_0:any;
  compView_0:import2.AppView<import0.TestcaseEASPhaseGridComponent>;
  _TestcaseEASAction_0_3:import6.TestcaseEASAction;
  _GridAction_0_4:import7.GridAction;
  _TestcaseEASPhaseGridComponent_0_5:Wrapper_TestcaseEASPhaseGridComponent;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_TestcaseEASPhaseGridComponent_Host0,renderType_TestcaseEASPhaseGridComponent_Host,import8.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import9.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import10.ComponentRef<any> {
    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'testcase-eas-phase-grid',import3.EMPTY_INLINE_ARRAY,rootSelector,(null as any));
    this.compView_0 = new View_TestcaseEASPhaseGridComponent0(this.viewUtils,this,0,this._el_0);
    this._TestcaseEASAction_0_3 = new import6.TestcaseEASAction(this.injectorGet(import11.Http,this.parentIndex));
    this._GridAction_0_4 = new import7.GridAction(this.injectorGet(import11.Http,this.parentIndex),this.injectorGet(import12.PouchDBPrefsServices,this.parentIndex));
    this._TestcaseEASPhaseGridComponent_0_5 = new Wrapper_TestcaseEASPhaseGridComponent(this._TestcaseEASAction_0_3,this._GridAction_0_4,this.compView_0.ref);
    this.compView_0.create(this._TestcaseEASPhaseGridComponent_0_5.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import10.ComponentRef_<any>(0,this,this._el_0,this._TestcaseEASPhaseGridComponent_0_5.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import6.TestcaseEASAction) && (0 === requestNodeIndex))) { return this._TestcaseEASAction_0_3; }
    if (((token === import7.GridAction) && (0 === requestNodeIndex))) { return this._GridAction_0_4; }
    if (((token === import0.TestcaseEASPhaseGridComponent) && (0 === requestNodeIndex))) { return this._TestcaseEASPhaseGridComponent_0_5.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    if (this._TestcaseEASPhaseGridComponent_0_5.ngDoCheck(this,this._el_0,throwOnChange)) { this.compView_0.markAsCheckOnce(); }
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
    this._TestcaseEASPhaseGridComponent_0_5.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
export const TestcaseEASPhaseGridComponentNgFactory:import10.ComponentFactory<import0.TestcaseEASPhaseGridComponent> = new import10.ComponentFactory<import0.TestcaseEASPhaseGridComponent>('testcase-eas-phase-grid',View_TestcaseEASPhaseGridComponent_Host0,import0.TestcaseEASPhaseGridComponent);
const styles_TestcaseEASPhaseGridComponent:any[] = ([] as any[]);
class View_TestcaseEASPhaseGridComponent2 extends import2.AppView<any> {
  _el_0:any;
  _text_1:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any,declaredViewContainer:import13.ViewContainer) {
    super(View_TestcaseEASPhaseGridComponent2,renderType_TestcaseEASPhaseGridComponent,import8.ViewType.EMBEDDED,viewUtils,parentView,parentIndex,parentElement,import9.ChangeDetectorStatus.CheckAlways,declaredViewContainer);
  }
  createInternal(rootSelector:string):import10.ComponentRef<any> {
    this._el_0 = import3.createRenderElement(this.renderer,(null as any),'button',new import3.InlineArray8(6,'class','zui-btn zui-btn-sec','data-dismiss','modal','type','button'),(null as any));
    this._text_1 = this.renderer.createText(this._el_0,'Cancel',(null as any));
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._text_1
    ]
    ),(null as any));
    return (null as any);
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
class View_TestcaseEASPhaseGridComponent1 extends import2.AppView<any> {
  _el_0:any;
  compView_0:import2.AppView<import14.ModalComponent>;
  _ModalComponent_0_3:import15.Wrapper_ModalComponent;
  _text_1:any;
  _el_2:any;
  _text_3:any;
  _el_4:any;
  _text_5:any;
  _text_6:any;
  _text_7:any;
  _el_8:any;
  _text_9:any;
  _anchor_10:any;
  /*private*/ _vc_10:import13.ViewContainer;
  _TemplateRef_10_5:any;
  _NgIf_10_6:import16.Wrapper_NgIf;
  _text_11:any;
  _el_12:any;
  _text_13:any;
  _text_14:any;
  _text_15:any;
  /*private*/ _expr_21:any;
  /*private*/ _expr_22:any;
  /*private*/ _expr_23:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any,declaredViewContainer:import13.ViewContainer) {
    super(View_TestcaseEASPhaseGridComponent1,renderType_TestcaseEASPhaseGridComponent,import8.ViewType.EMBEDDED,viewUtils,parentView,parentIndex,parentElement,import9.ChangeDetectorStatus.CheckAlways,declaredViewContainer);
    this._expr_21 = import1.UNINITIALIZED;
    this._expr_22 = import1.UNINITIALIZED;
    this._expr_23 = import1.UNINITIALIZED;
  }
  createInternal(rootSelector:string):import10.ComponentRef<any> {
    this._el_0 = import3.createRenderElement(this.renderer,(null as any),'zui-modal',import3.EMPTY_INLINE_ARRAY,(null as any));
    this.compView_0 = new import15.View_ModalComponent0(this.viewUtils,this,0,this._el_0);
    this._ModalComponent_0_3 = new import15.Wrapper_ModalComponent(new import17.ElementRef(this._el_0),this.compView_0.ref);
    this._text_1 = this.renderer.createText((null as any),'\n    ',(null as any));
    this._el_2 = import3.createRenderElement(this.renderer,(null as any),'zui-modal-body',import3.EMPTY_INLINE_ARRAY,(null as any));
    this._text_3 = this.renderer.createText(this._el_2,'\n        ',(null as any));
    this._el_4 = import3.createRenderElement(this.renderer,this._el_2,'p',import3.EMPTY_INLINE_ARRAY,(null as any));
    this._text_5 = this.renderer.createText(this._el_4,'',(null as any));
    this._text_6 = this.renderer.createText(this._el_2,'\n    ',(null as any));
    this._text_7 = this.renderer.createText((null as any),'\n    ',(null as any));
    this._el_8 = import3.createRenderElement(this.renderer,(null as any),'zui-modal-footer',import3.EMPTY_INLINE_ARRAY,(null as any));
    this._text_9 = this.renderer.createText(this._el_8,'\n        ',(null as any));
    this._anchor_10 = this.renderer.createTemplateAnchor(this._el_8,(null as any));
    this._vc_10 = new import13.ViewContainer(10,8,this,this._anchor_10);
    this._TemplateRef_10_5 = new import18.TemplateRef_(this,10,this._anchor_10);
    this._NgIf_10_6 = new import16.Wrapper_NgIf(this._vc_10.vcRef,this._TemplateRef_10_5);
    this._text_11 = this.renderer.createText(this._el_8,'\n        ',(null as any));
    this._el_12 = import3.createRenderElement(this.renderer,this._el_8,'button',new import3.InlineArray4(4,'class','zui-btn zui-btn-primary','type','button'),(null as any));
    this._text_13 = this.renderer.createText(this._el_12,'',(null as any));
    this._text_14 = this.renderer.createText(this._el_8,'\n    ',(null as any));
    this._text_15 = this.renderer.createText((null as any),'\n',(null as any));
    this.compView_0.create(this._ModalComponent_0_3.context);
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_12,new import3.InlineArray2(2,'click',(null as any)),this.eventHandler(this.handleEvent_12));
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._text_1,
      this._el_2,
      this._text_3,
      this._el_4,
      this._text_5,
      this._text_6,
      this._text_7,
      this._el_8,
      this._text_9,
      this._anchor_10,
      this._text_11,
      this._el_12,
      this._text_13,
      this._text_14,
      this._text_15
    ]
    ),[disposable_0]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import18.TemplateRef) && (10 === requestNodeIndex))) { return this._TemplateRef_10_5; }
    if (((token === import19.NgIf) && (10 === requestNodeIndex))) { return this._NgIf_10_6.context; }
    if (((token === import14.ModalComponent) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 15)))) { return this._ModalComponent_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_0_0_0:any = this.parentView.context.confirmationObject.heading;
    this._ModalComponent_0_3.check_title(currVal_0_0_0,throwOnChange,false);
    const currVal_0_0_1:any = 'confirmation-modal-eas';
    this._ModalComponent_0_3.check_modalId(currVal_0_0_1,throwOnChange,false);
    const currVal_0_0_2:any = 'medium';
    this._ModalComponent_0_3.check_modalSize(currVal_0_0_2,throwOnChange,false);
    this._ModalComponent_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    const currVal_10_0_0:any = this.parentView.context.confirmationObject.showCancelButton;
    this._NgIf_10_6.check_ngIf(currVal_10_0_0,throwOnChange,false);
    this._NgIf_10_6.ngDoCheck(this,this._anchor_10,throwOnChange);
    this._vc_10.detectChangesInNestedViews(throwOnChange);
    const currVal_21:any = import3.inlineInterpolate(1,' ',this.parentView.context.confirmationObject.text,' ');
    if (import3.checkBinding(throwOnChange,this._expr_21,currVal_21)) {
      this.renderer.setText(this._text_5,currVal_21);
      this._expr_21 = currVal_21;
    }
    const currVal_22:any = this.parentView.context.confirmationObject.action;
    if (import3.checkBinding(throwOnChange,this._expr_22,currVal_22)) {
      this.renderer.setElementAttribute(this._el_12,'value',((currVal_22 == null)? (null as any): currVal_22.toString()));
      this._expr_22 = currVal_22;
    }
    const currVal_23:any = import3.inlineInterpolate(1,'',this.parentView.context.confirmationObject.buttonText,'');
    if (import3.checkBinding(throwOnChange,this._expr_23,currVal_23)) {
      this.renderer.setText(this._text_13,currVal_23);
      this._expr_23 = currVal_23;
    }
    this.compView_0.internalDetectChanges(throwOnChange);
    if (!throwOnChange) { if ((this.numberOfChecks === 0)) { this._ModalComponent_0_3.context.ngAfterViewInit(); } }
  }
  destroyInternal():void {
    this._vc_10.destroyNestedViews();
    this.compView_0.destroy();
    this._ModalComponent_0_3.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  visitProjectableNodesInternal(nodeIndex:number,ngContentIndex:number,cb:any,ctx:any):void {
    if (((nodeIndex == 0) && (ngContentIndex == 0))) {  }
    if (((nodeIndex == 0) && (ngContentIndex == 1))) { cb(this._el_2,ctx); }
    if (((nodeIndex == 0) && (ngContentIndex == 2))) { cb(this._el_8,ctx); }
  }
  createEmbeddedViewInternal(nodeIndex:number):import2.AppView<any> {
    if ((nodeIndex == 10)) { return new View_TestcaseEASPhaseGridComponent2(this.viewUtils,this,10,this._anchor_10,this._vc_10); }
    return (null as any);
  }
  handleEvent_12(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'click')) {
      const pd_sub_0:any = ((<any>this.parentView.context.confirmationActionCall($event)) !== false);
      result = (pd_sub_0 && result);
    }
    return result;
  }
}
var renderType_TestcaseEASPhaseGridComponent:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,styles_TestcaseEASPhaseGridComponent,{});
export class View_TestcaseEASPhaseGridComponent0 extends import2.AppView<import0.TestcaseEASPhaseGridComponent> {
  _el_0:any;
  compView_0:import2.AppView<import20.GridComponent>;
  _GridAction_0_3:import7.GridAction;
  _GlobalAction_0_4:import21.GlobalAction;
  _UtililtyFunctions_0_5:import22.UtililtyFunctions;
  _GridComponent_0_6:import23.Wrapper_GridComponent;
  _text_1:any;
  _anchor_2:any;
  /*private*/ _vc_2:import13.ViewContainer;
  _TemplateRef_2_5:any;
  _NgIf_2_6:import16.Wrapper_NgIf;
  _text_3:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_TestcaseEASPhaseGridComponent0,renderType_TestcaseEASPhaseGridComponent,import8.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import9.ChangeDetectorStatus.CheckOnce);
  }
  createInternal(rootSelector:string):import10.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._el_0 = import3.createRenderElement(this.renderer,parentRenderNode,'grid',new import3.InlineArray2(2,'class','phase-grid-table'),(null as any));
    this.compView_0 = new import23.View_GridComponent0(this.viewUtils,this,0,this._el_0);
    this._GridAction_0_3 = new import7.GridAction(this.parentView.injectorGet(import11.Http,this.parentIndex),this.parentView.injectorGet(import12.PouchDBPrefsServices,this.parentIndex));
    this._GlobalAction_0_4 = new import21.GlobalAction(this.parentView.injectorGet(import11.Http,this.parentIndex));
    this._UtililtyFunctions_0_5 = new import22.UtililtyFunctions();
    this._GridComponent_0_6 = new import23.Wrapper_GridComponent(this._GridAction_0_3,this._GlobalAction_0_4,new import17.ElementRef(this._el_0),this._UtililtyFunctions_0_5,this.compView_0.ref,this.parentView.injectorGet(import24.NgZone,this.parentIndex),this.parentView.injectorGet(import25.Router,this.parentIndex),this.parentView.injectorGet(import12.PouchDBPrefsServices,this.parentIndex),this.parentView.injectorGet(import26.ToastrService,this.parentIndex));
    this.compView_0.create(this._GridComponent_0_6.context);
    this._text_1 = this.renderer.createText(parentRenderNode,'\n\n',(null as any));
    this._anchor_2 = this.renderer.createTemplateAnchor(parentRenderNode,(null as any));
    this._vc_2 = new import13.ViewContainer(2,(null as any),this,this._anchor_2);
    this._TemplateRef_2_5 = new import18.TemplateRef_(this,2,this._anchor_2);
    this._NgIf_2_6 = new import16.Wrapper_NgIf(this._vc_2.vcRef,this._TemplateRef_2_5);
    this._text_3 = this.renderer.createText(parentRenderNode,'\n',(null as any));
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_0,new import3.InlineArray16(16,'onGridInlineEditSubmit',(null as any),'onGridRowClick',(null as any),'onGridRowSelection',(null as any),'onGridActionIconClick',(null as any),'onGridPrevClick',(null as any),'onGridNextClick',(null as any),'onGridPageSizeChange',(null as any),'onGridPaginateByIndex',(null as any)),this.eventHandler(this.handleEvent_0));
    this._GridComponent_0_6.subscribe(this,this.eventHandler(this.handleEvent_0),true,true,true,false,false,true,true,true,false,true,true,false,false,false,false,false,false);
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._text_1,
      this._anchor_2,
      this._text_3
    ]
    ),[disposable_0]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import7.GridAction) && (0 === requestNodeIndex))) { return this._GridAction_0_3; }
    if (((token === import21.GlobalAction) && (0 === requestNodeIndex))) { return this._GlobalAction_0_4; }
    if (((token === import22.UtililtyFunctions) && (0 === requestNodeIndex))) { return this._UtililtyFunctions_0_5; }
    if (((token === import20.GridComponent) && (0 === requestNodeIndex))) { return this._GridComponent_0_6.context; }
    if (((token === import18.TemplateRef) && (2 === requestNodeIndex))) { return this._TemplateRef_2_5; }
    if (((token === import19.NgIf) && (2 === requestNodeIndex))) { return this._NgIf_2_6.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_0_0_0:any = this.context.phaseGridRows;
    this._GridComponent_0_6.check_rows(currVal_0_0_0,throwOnChange,false);
    const currVal_0_0_1:any = this.context.keyToCheck;
    this._GridComponent_0_6.check_keyToCheck(currVal_0_0_1,throwOnChange,false);
    const currVal_0_0_2:any = this.context._phaseGridType;
    this._GridComponent_0_6.check_gridType(currVal_0_0_2,throwOnChange,false);
    const currVal_0_0_3:any = this.context.selectedTctIds;
    this._GridComponent_0_6.check_rowIds(currVal_0_0_3,throwOnChange,false);
    const currVal_0_0_4:any = this.context.keyOnRowSelect;
    this._GridComponent_0_6.check_keyOnRowSelect(currVal_0_0_4,throwOnChange,false);
    const currVal_0_0_5:any = this.context.paginationOptions;
    this._GridComponent_0_6.check_paginationOptions(currVal_0_0_5,throwOnChange,false);
    this._GridComponent_0_6.ngDoCheck(this,this._el_0,throwOnChange);
    const currVal_2_0_0:any = this.context.confirmationObject;
    this._NgIf_2_6.check_ngIf(currVal_2_0_0,throwOnChange,false);
    this._NgIf_2_6.ngDoCheck(this,this._anchor_2,throwOnChange);
    this._vc_2.detectChangesInNestedViews(throwOnChange);
    this.compView_0.internalDetectChanges(throwOnChange);
    if (!throwOnChange) { if ((this.numberOfChecks === 0)) { this._GridComponent_0_6.context.ngAfterViewInit(); } }
  }
  destroyInternal():void {
    this._vc_2.destroyNestedViews();
    this.compView_0.destroy();
    this._GridComponent_0_6.ngOnDestroy();
  }
  createEmbeddedViewInternal(nodeIndex:number):import2.AppView<any> {
    if ((nodeIndex == 2)) { return new View_TestcaseEASPhaseGridComponent1(this.viewUtils,this,2,this._anchor_2,this._vc_2); }
    return (null as any);
  }
  handleEvent_0(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'onGridInlineEditSubmit')) {
      const pd_sub_0:any = ((<any>this.context.phaseGridAssignSelectChange($event)) !== false);
      result = (pd_sub_0 && result);
    }
    if ((eventName == 'onGridRowClick')) {
      const pd_sub_1:any = ((<any>this.context.phaseGridRowClick($event)) !== false);
      result = (pd_sub_1 && result);
    }
    if ((eventName == 'onGridRowSelection')) {
      const pd_sub_2:any = ((<any>this.context.phaseGridRowSelection($event)) !== false);
      result = (pd_sub_2 && result);
    }
    if ((eventName == 'onGridActionIconClick')) {
      const pd_sub_3:any = ((<any>this.context.phaseGridActionClick($event)) !== false);
      result = (pd_sub_3 && result);
    }
    if ((eventName == 'onGridPrevClick')) {
      const pd_sub_4:any = ((<any>this.context.phaseGridPrevClick($event)) !== false);
      result = (pd_sub_4 && result);
    }
    if ((eventName == 'onGridNextClick')) {
      const pd_sub_5:any = ((<any>this.context.phaseGridNextClick($event)) !== false);
      result = (pd_sub_5 && result);
    }
    if ((eventName == 'onGridPageSizeChange')) {
      const pd_sub_6:any = ((<any>this.context.phaseGridPageSizeChange($event)) !== false);
      result = (pd_sub_6 && result);
    }
    if ((eventName == 'onGridPaginateByIndex')) {
      const pd_sub_7:any = ((<any>this.context.phaseGridPaginateByIndex($event)) !== false);
      result = (pd_sub_7 && result);
    }
    return result;
  }
}