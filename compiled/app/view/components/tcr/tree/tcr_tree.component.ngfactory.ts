/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '../../../../../../app/view/components/tcr/tree/tcr_tree.component';
import * as import1 from '@angular/core/src/change_detection/change_detection_util';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/render/api';
import * as import5 from '@angular/core/src/metadata/view';
import * as import6 from '../../../../../../app/actions/notification.action';
import * as import7 from '@angular/core/src/linker/view_type';
import * as import8 from '@angular/core/src/change_detection/constants';
import * as import9 from '@angular/core/src/linker/component_factory';
import * as import10 from '@angular/http/src/http';
import * as import11 from '../../../../../../app/actions/tcr.action';
import * as import12 from '@angular/core/src/zone/ng_zone';
import * as import13 from '@angular/core/src/linker/component_factory_resolver';
import * as import14 from '@angular/router/src/router_state';
import * as import15 from '@angular/router/src/router';
import * as import16 from '@angular/core/src/linker/query_list';
import * as import17 from '@angular/core/src/linker/view_container';
import * as import18 from '../../../../../../app/view/components/common/tree/tree.component';
import * as import19 from '../../../../../../app/actions/global.action';
import * as import20 from '../../common/tree/tree.component.ngfactory';
import * as import21 from '../../../../../../app/services/toastr.service';
export class Wrapper_TcrTreeComponent {
  /*private*/ _eventHandler:Function;
  context:import0.TcrTreeComponent;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  /*private*/ _expr_3:any;
  /*private*/ _expr_4:any;
  subscription0:any;
  subscription1:any;
  subscription2:any;
  subscription3:any;
  subscription4:any;
  subscription5:any;
  constructor(p0:any,p1:any,p2:any,p3:any,p4:any,p5:any,p6:any,p7:any) {
    this._changed = false;
    this.context = new import0.TcrTreeComponent(p0,p1,p2,p3,p4,p5,p6,p7);
    this._expr_0 = import1.UNINITIALIZED;
    this._expr_1 = import1.UNINITIALIZED;
    this._expr_2 = import1.UNINITIALIZED;
    this._expr_3 = import1.UNINITIALIZED;
    this._expr_4 = import1.UNINITIALIZED;
  }
  ngOnDetach(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    this.context.ngOnDestroy();
    (this.subscription0 && this.subscription0.unsubscribe());
    (this.subscription1 && this.subscription1.unsubscribe());
    (this.subscription2 && this.subscription2.unsubscribe());
    (this.subscription3 && this.subscription3.unsubscribe());
    (this.subscription4 && this.subscription4.unsubscribe());
    (this.subscription5 && this.subscription5.unsubscribe());
  }
  check_releaseIdObs(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.releaseIdObs = currValue;
      this._expr_0 = currValue;
    }
  }
  check_showContextMenu(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.showContextMenu = currValue;
      this._expr_1 = currValue;
    }
  }
  check_treeOptions(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_2,currValue))) {
      this._changed = true;
      this.context.treeOptions = currValue;
      this._expr_2 = currValue;
    }
  }
  check_appId(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_3,currValue))) {
      this._changed = true;
      this.context.appId = currValue;
      this._expr_3 = currValue;
    }
  }
  check_showImported(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_4,currValue))) {
      this._changed = true;
      this.context.showImported = currValue;
      this._expr_4 = currValue;
    }
  }
  ngDoCheck(view:import2.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import2.AppView<any>,_eventHandler:any,emit0:boolean,emit1:boolean,emit2:boolean,emit3:boolean,emit4:boolean,emit5:boolean):void {
    this._eventHandler = _eventHandler;
    if (emit0) { (this.subscription0 = this.context.onTreeClick.subscribe(_eventHandler.bind(view,'onTreeClick'))); }
    if (emit1) { (this.subscription1 = this.context.onTreeCollapse.subscribe(_eventHandler.bind(view,'onTreeCollapse'))); }
    if (emit2) { (this.subscription2 = this.context.OnContextMenuClick.subscribe(_eventHandler.bind(view,'OnContextMenuClick'))); }
    if (emit3) { (this.subscription3 = this.context.onTreeNodeSelect.subscribe(_eventHandler.bind(view,'onTreeNodeSelect'))); }
    if (emit4) { (this.subscription4 = this.context.onToggleNode.subscribe(_eventHandler.bind(view,'onToggleNode'))); }
    if (emit5) { (this.subscription5 = this.context.treeDrop.subscribe(_eventHandler.bind(view,'treeDrop'))); }
  }
}
var renderType_TcrTreeComponent_Host:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,([] as any[]),{});
class View_TcrTreeComponent_Host0 extends import2.AppView<any> {
  _el_0:any;
  compView_0:import2.AppView<import0.TcrTreeComponent>;
  _NotificationAction_0_3:import6.NotificationAction;
  _TcrTreeComponent_0_4:Wrapper_TcrTreeComponent;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_TcrTreeComponent_Host0,renderType_TcrTreeComponent_Host,import7.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import8.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import9.ComponentRef<any> {
    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'zui-tcr-tree',import3.EMPTY_INLINE_ARRAY,rootSelector,(null as any));
    this.compView_0 = new View_TcrTreeComponent0(this.viewUtils,this,0,this._el_0);
    this._NotificationAction_0_3 = new import6.NotificationAction(this.injectorGet(import10.Http,this.parentIndex));
    this._TcrTreeComponent_0_4 = new Wrapper_TcrTreeComponent(this.compView_0.ref,this.injectorGet(import11.TCRAction,this.parentIndex),this.injectorGet(import12.NgZone,this.parentIndex),this._NotificationAction_0_3,this.injector(0),this.injectorGet(import13.ComponentFactoryResolver,this.parentIndex),this.injectorGet(import14.ActivatedRoute,this.parentIndex),this.injectorGet(import15.Router,this.parentIndex));
    this.compView_0.create(this._TcrTreeComponent_0_4.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import9.ComponentRef_<any>(0,this,this._el_0,this._TcrTreeComponent_0_4.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import6.NotificationAction) && (0 === requestNodeIndex))) { return this._NotificationAction_0_3; }
    if (((token === import0.TcrTreeComponent) && (0 === requestNodeIndex))) { return this._TcrTreeComponent_0_4.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    if (this._TcrTreeComponent_0_4.ngDoCheck(this,this._el_0,throwOnChange)) { this.compView_0.markAsCheckOnce(); }
    this.compView_0.internalDetectChanges(throwOnChange);
    if (!throwOnChange) { if ((this.numberOfChecks === 0)) { this._TcrTreeComponent_0_4.context.ngAfterViewInit(); } }
  }
  destroyInternal():void {
    this.compView_0.destroy();
    this._TcrTreeComponent_0_4.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
export const TcrTreeComponentNgFactory:import9.ComponentFactory<import0.TcrTreeComponent> = new import9.ComponentFactory<import0.TcrTreeComponent>('zui-tcr-tree',View_TcrTreeComponent_Host0,import0.TcrTreeComponent);
const styles_TcrTreeComponent:any[] = ([] as any[]);
var renderType_TcrTreeComponent:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,styles_TcrTreeComponent,{});
export class View_TcrTreeComponent0 extends import2.AppView<import0.TcrTreeComponent> {
  _viewQuery_target_0:import16.QueryList<any>;
  _el_0:any;
  /*private*/ _vc_0:import17.ViewContainer;
  _text_1:any;
  _el_2:any;
  compView_2:import2.AppView<import18.TreeComponent>;
  _GlobalAction_2_3:import19.GlobalAction;
  _TreeComponent_2_4:import20.Wrapper_TreeComponent;
  _text_3:any;
  _text_4:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_TcrTreeComponent0,renderType_TcrTreeComponent,import7.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import8.ChangeDetectorStatus.CheckOnce);
  }
  createInternal(rootSelector:string):import9.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._viewQuery_target_0 = new import16.QueryList<any>();
    this._el_0 = import3.createRenderElement(this.renderer,parentRenderNode,'div',new import3.InlineArray2(2,'style','display:inline;'),(null as any));
    this._vc_0 = new import17.ViewContainer(0,(null as any),this,this._el_0);
    this._text_1 = this.renderer.createText(this._el_0,'\n    ',(null as any));
    this._el_2 = import3.createRenderElement(this.renderer,this._el_0,'tree-view',import3.EMPTY_INLINE_ARRAY,(null as any));
    this.compView_2 = new import20.View_TreeComponent0(this.viewUtils,this,2,this._el_2);
    this._GlobalAction_2_3 = new import19.GlobalAction(this.parentView.injectorGet(import10.Http,this.parentIndex));
    this._TreeComponent_2_4 = new import20.Wrapper_TreeComponent(this._GlobalAction_2_3,this.parentView.injectorGet(import21.ToastrService,this.parentIndex));
    this.compView_2.create(this._TreeComponent_2_4.context);
    this._text_3 = this.renderer.createText(this._el_0,'\n',(null as any));
    this._text_4 = this.renderer.createText(parentRenderNode,'\n',(null as any));
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_0,new import3.InlineArray2(2,'mouseleave',(null as any)),this.eventHandler(this.handleEvent_0));
    var disposable_1:Function = import3.subscribeToRenderElement(this,this._el_2,new import3.InlineArray16(14,'onTreeNodeClick',(null as any),'onTreeNodeSelect',(null as any),'onToggleNode',(null as any),'onTreeNodeDragAndDrop',(null as any),'clearTreeUpdate',(null as any),'onDragEnd',(null as any),'treeInstance',(null as any)),this.eventHandler(this.handleEvent_2));
    this._TreeComponent_2_4.subscribe(this,this.eventHandler(this.handleEvent_2),false,true,false,false,true,false,true,true,true,true,true);
    this._viewQuery_target_0.reset([this._vc_0.vcRef]);
    this.context.target = this._viewQuery_target_0.first;
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._text_1,
      this._el_2,
      this._text_3,
      this._text_4
    ]
    ),[
      disposable_0,
      disposable_1
    ]
    );
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import19.GlobalAction) && (2 === requestNodeIndex))) { return this._GlobalAction_2_3; }
    if (((token === import18.TreeComponent) && (2 === requestNodeIndex))) { return this._TreeComponent_2_4.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_2_0_0:any = this.context.treeOptions;
    this._TreeComponent_2_4.check_options(currVal_2_0_0,throwOnChange,false);
    const currVal_2_0_1:any = this.context.treeData;
    this._TreeComponent_2_4.check_treeData(currVal_2_0_1,throwOnChange,false);
    const currVal_2_0_2:any = this.context.showContextMenu;
    this._TreeComponent_2_4.check_showContextMenu(currVal_2_0_2,throwOnChange,false);
    const currVal_2_0_3:any = this.context.tcrContextMenuItems;
    this._TreeComponent_2_4.check_contextMenuItems(currVal_2_0_3,throwOnChange,false);
    const currVal_2_0_4:any = '-tcr';
    this._TreeComponent_2_4.check_treeContext(currVal_2_0_4,throwOnChange,false);
    const currVal_2_0_5:any = this.context.deleteNode;
    this._TreeComponent_2_4.check_deleteNode(currVal_2_0_5,throwOnChange,false);
    const currVal_2_0_6:any = this.context.forceSelect;
    this._TreeComponent_2_4.check_forceSelect(currVal_2_0_6,throwOnChange,false);
    const currVal_2_0_7:any = this.context.treeId;
    this._TreeComponent_2_4.check_openSelect(currVal_2_0_7,throwOnChange,false);
    const currVal_2_0_8:any = this.context.checkCb;
    this._TreeComponent_2_4.check_checkCb(currVal_2_0_8,throwOnChange,false);
    const currVal_2_0_9:any = true;
    this._TreeComponent_2_4.check_doDirtyCheck(currVal_2_0_9,throwOnChange,false);
    const currVal_2_0_10:any = true;
    this._TreeComponent_2_4.check_selectOnRedraw(currVal_2_0_10,throwOnChange,false);
    const currVal_2_0_11:any = this.context.dropExternal;
    this._TreeComponent_2_4.check_dropExternal(currVal_2_0_11,throwOnChange,false);
    this._TreeComponent_2_4.ngDoCheck(this,this._el_2,throwOnChange);
    this._vc_0.detectChangesInNestedViews(throwOnChange);
    this.compView_2.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this._vc_0.destroyNestedViews();
    this.compView_2.destroy();
    this._TreeComponent_2_4.ngOnDestroy();
  }
  handleEvent_0(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'mouseleave')) {
      const pd_sub_0:any = ((<any>this.context.onTcrTreeCollapse($event)) !== false);
      result = (pd_sub_0 && result);
    }
    return result;
  }
  handleEvent_2(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'onTreeNodeClick')) {
      const pd_sub_0:any = ((<any>this.context.onTcrTreeClick($event)) !== false);
      result = (pd_sub_0 && result);
    }
    if ((eventName == 'onTreeNodeSelect')) {
      const pd_sub_1:any = ((<any>this.context.onTreeNodeSelected($event)) !== false);
      result = (pd_sub_1 && result);
    }
    if ((eventName == 'onToggleNode')) {
      const pd_sub_2:any = ((<any>this.context.onToggleTcrNode($event)) !== false);
      result = (pd_sub_2 && result);
    }
    if ((eventName == 'onTreeNodeDragAndDrop')) {
      const pd_sub_3:any = ((<any>this.context.onTcrNodeDragAndDrop($event)) !== false);
      result = (pd_sub_3 && result);
    }
    if ((eventName == 'clearTreeUpdate')) {
      const pd_sub_4:any = ((<any>this.context.clearTreeUpdate()) !== false);
      result = (pd_sub_4 && result);
    }
    if ((eventName == 'onDragEnd')) {
      const pd_sub_5:any = ((<any>this.context.onTreeDrop($event)) !== false);
      result = (pd_sub_5 && result);
    }
    if ((eventName == 'treeInstance')) {
      const pd_sub_6:any = ((<any>this.context.treeInstance($event)) !== false);
      result = (pd_sub_6 && result);
    }
    return result;
  }
}