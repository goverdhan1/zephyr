/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '../../../../../app/view/components/tcr/tcr_grid.component';
import * as import1 from '@angular/core/src/change_detection/change_detection_util';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/render/api';
import * as import5 from '@angular/core/src/metadata/view';
import * as import6 from '../../../../../app/actions/tcr.action';
import * as import7 from '../../../../../app/actions/notification.action';
import * as import8 from '../../../../../app/actions/grid.action';
import * as import9 from '@angular/core/src/linker/view_type';
import * as import10 from '@angular/core/src/change_detection/constants';
import * as import11 from '@angular/core/src/linker/component_factory';
import * as import12 from '@angular/http/src/http';
import * as import13 from '../../../../../app/services/pouch.db.service';
import * as import14 from '../../../../../app/view/components/common/coverage-grid/coverage-grid.component';
import * as import15 from '../../../../../app/actions/requirements.action';
import * as import16 from '../common/coverage-grid/coverage-grid.component.ngfactory';
import * as import17 from '@angular/core/src/linker/view_container';
import * as import18 from '@angular/core/src/linker/query_list';
import * as import19 from '../../../../../app/view/components/grid/grid.component';
import * as import20 from '../../../../../app/actions/global.action';
import * as import21 from '../../../../../app/utils/scripts/utils';
import * as import22 from '../grid/grid.component.ngfactory';
import * as import23 from '../../../../node_modules/@angular/common/src/directives/ng_if.ngfactory';
import * as import24 from '@angular/core/src/linker/element_ref';
import * as import25 from '@angular/core/src/zone/ng_zone';
import * as import26 from '@angular/router/src/router';
import * as import27 from '../../../../../app/services/toastr.service';
import * as import28 from '@angular/core/src/linker/template_ref';
import * as import29 from '@angular/common/src/directives/ng_if';
export class Wrapper_TcrGridComponent {
  /*private*/ _eventHandler:Function;
  context:import0.TcrGridComponent;
  /*private*/ _changed:boolean;
  /*private*/ _changes:{[key: string]:any};
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  /*private*/ _expr_3:any;
  /*private*/ _expr_4:any;
  /*private*/ _expr_5:any;
  /*private*/ _expr_6:any;
  /*private*/ _expr_7:any;
  /*private*/ _expr_8:any;
  /*private*/ _expr_9:any;
  /*private*/ _expr_10:any;
  /*private*/ _expr_11:any;
  /*private*/ _expr_12:any;
  subscription0:any;
  subscription1:any;
  subscription2:any;
  subscription3:any;
  subscription4:any;
  subscription5:any;
  constructor(p0:any,p1:any,p2:any,p3:any,p4:any) {
    this._changed = false;
    this._changes = {};
    this.context = new import0.TcrGridComponent(p0,p1,p2,p3,p4);
    this._expr_0 = import1.UNINITIALIZED;
    this._expr_1 = import1.UNINITIALIZED;
    this._expr_2 = import1.UNINITIALIZED;
    this._expr_3 = import1.UNINITIALIZED;
    this._expr_4 = import1.UNINITIALIZED;
    this._expr_5 = import1.UNINITIALIZED;
    this._expr_6 = import1.UNINITIALIZED;
    this._expr_7 = import1.UNINITIALIZED;
    this._expr_8 = import1.UNINITIALIZED;
    this._expr_9 = import1.UNINITIALIZED;
    this._expr_10 = import1.UNINITIALIZED;
    this._expr_11 = import1.UNINITIALIZED;
    this._expr_12 = import1.UNINITIALIZED;
  }
  ngOnDetach(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    this.context.ngOnDestroy();
    (this.subscription0 && this.subscription0.unsubscribe());
    (this.subscription1 && this.subscription1.unsubscribe());
    (this.subscription2 && this.subscription2.unsubscribe());
    (this.subscription3 && this.subscription3.unsubscribe());
    (this.subscription4 && this.subscription4.unsubscribe());
    (this.subscription5 && this.subscription5.unsubscribe());
  }
  check_selectedTctIds(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.selectedTctIds = currValue;
      this._changes['selectedTctIds'] = new import1.SimpleChange(this._expr_0,currValue);
      this._expr_0 = currValue;
    }
  }
  check_secIds(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.secIds = currValue;
      this._changes['secIds'] = new import1.SimpleChange(this._expr_1,currValue);
      this._expr_1 = currValue;
    }
  }
  check_isSearchView(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_2,currValue))) {
      this._changed = true;
      this.context.isSearchView = currValue;
      this._changes['isSearchView'] = new import1.SimpleChange(this._expr_2,currValue);
      this._expr_2 = currValue;
    }
  }
  check_isAdvancedSearch(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_3,currValue))) {
      this._changed = true;
      this.context.isAdvancedSearch = currValue;
      this._changes['isAdvancedSearch'] = new import1.SimpleChange(this._expr_3,currValue);
      this._expr_3 = currValue;
    }
  }
  check_bubblePagination(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_4,currValue))) {
      this._changed = true;
      this.context.bubblePagination = currValue;
      this._changes['bubblePagination'] = new import1.SimpleChange(this._expr_4,currValue);
      this._expr_4 = currValue;
    }
  }
  check_selectedTreeNodeObs(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_5,currValue))) {
      this._changed = true;
      this.context.selectedTreeNodeObs = currValue;
      this._changes['selectedTreeNodeObs'] = new import1.SimpleChange(this._expr_5,currValue);
      this._expr_5 = currValue;
    }
  }
  check_isDetailView(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_6,currValue))) {
      this._changed = true;
      this.context.isDetailView = currValue;
      this._changes['isDetailView'] = new import1.SimpleChange(this._expr_6,currValue);
      this._expr_6 = currValue;
    }
  }
  check_gridPageSize(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_7,currValue))) {
      this._changed = true;
      this.context.gridPageSize = currValue;
      this._changes['gridPageSize'] = new import1.SimpleChange(this._expr_7,currValue);
      this._expr_7 = currValue;
    }
  }
  check_emitBrowseEvent(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_8,currValue))) {
      this._changed = true;
      this.context.emitBrowseEvent = currValue;
      this._changes['emitBrowseEvent'] = new import1.SimpleChange(this._expr_8,currValue);
      this._expr_8 = currValue;
    }
  }
  check_appId(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_9,currValue))) {
      this._changed = true;
      this.context.appId = currValue;
      this._changes['appId'] = new import1.SimpleChange(this._expr_9,currValue);
      this._expr_9 = currValue;
    }
  }
  check_inRelease(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_10,currValue))) {
      this._changed = true;
      this.context.inRelease = currValue;
      this._changes['inRelease'] = new import1.SimpleChange(this._expr_10,currValue);
      this._expr_10 = currValue;
    }
  }
  check_showCoverage(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_11,currValue))) {
      this._changed = true;
      this.context.showCoverage = currValue;
      this._changes['showCoverage'] = new import1.SimpleChange(this._expr_11,currValue);
      this._expr_11 = currValue;
    }
  }
  check_releaseId(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_12,currValue))) {
      this._changed = true;
      this.context.releaseId = currValue;
      this._changes['releaseId'] = new import1.SimpleChange(this._expr_12,currValue);
      this._expr_12 = currValue;
    }
  }
  ngDoCheck(view:import2.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    if (!throwOnChange) {
      if (changed) {
        this.context.ngOnChanges(this._changes);
        this._changes = {};
      }
      if ((view.numberOfChecks === 0)) { this.context.ngOnInit(); }
    }
    return changed;
  }
  checkHost(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import2.AppView<any>,_eventHandler:any,emit0:boolean,emit1:boolean,emit2:boolean,emit3:boolean,emit4:boolean,emit5:boolean):void {
    this._eventHandler = _eventHandler;
    if (emit0) { (this.subscription0 = this.context.onClearSelectedTc.subscribe(_eventHandler.bind(view,'onClearSelectedTc'))); }
    if (emit1) { (this.subscription1 = this.context.onClearSelectedTctIds.subscribe(_eventHandler.bind(view,'onClearSelectedTctIds'))); }
    if (emit2) { (this.subscription2 = this.context.onTcrGridRowClick.subscribe(_eventHandler.bind(view,'onTcrGridRowClick'))); }
    if (emit3) { (this.subscription3 = this.context.onTcrGridRowSelection.subscribe(_eventHandler.bind(view,'onTcrGridRowSelection'))); }
    if (emit4) { (this.subscription4 = this.context.GridIndexPagination.subscribe(_eventHandler.bind(view,'GridIndexPagination'))); }
    if (emit5) { (this.subscription5 = this.context.GridPageSizeChanged.subscribe(_eventHandler.bind(view,'GridPageSizeChanged'))); }
  }
}
var renderType_TcrGridComponent_Host:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,([] as any[]),{});
class View_TcrGridComponent_Host0 extends import2.AppView<any> {
  _el_0:any;
  compView_0:import2.AppView<import0.TcrGridComponent>;
  _TCRAction_0_3:import6.TCRAction;
  _NotificationAction_0_4:import7.NotificationAction;
  _GridAction_0_5:import8.GridAction;
  _TcrGridComponent_0_6:Wrapper_TcrGridComponent;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_TcrGridComponent_Host0,renderType_TcrGridComponent_Host,import9.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import10.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import11.ComponentRef<any> {
    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'zui-tcr-grid',import3.EMPTY_INLINE_ARRAY,rootSelector,(null as any));
    this.compView_0 = new View_TcrGridComponent0(this.viewUtils,this,0,this._el_0);
    this._TCRAction_0_3 = new import6.TCRAction(this.injectorGet(import12.Http,this.parentIndex));
    this._NotificationAction_0_4 = new import7.NotificationAction(this.injectorGet(import12.Http,this.parentIndex));
    this._GridAction_0_5 = new import8.GridAction(this.injectorGet(import12.Http,this.parentIndex),this.injectorGet(import13.PouchDBPrefsServices,this.parentIndex));
    this._TcrGridComponent_0_6 = new Wrapper_TcrGridComponent(this._TCRAction_0_3,this._NotificationAction_0_4,this.compView_0.ref,this._GridAction_0_5,this.injectorGet(import13.PouchDBPrefsServices,this.parentIndex));
    this.compView_0.create(this._TcrGridComponent_0_6.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import11.ComponentRef_<any>(0,this,this._el_0,this._TcrGridComponent_0_6.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import6.TCRAction) && (0 === requestNodeIndex))) { return this._TCRAction_0_3; }
    if (((token === import7.NotificationAction) && (0 === requestNodeIndex))) { return this._NotificationAction_0_4; }
    if (((token === import8.GridAction) && (0 === requestNodeIndex))) { return this._GridAction_0_5; }
    if (((token === import0.TcrGridComponent) && (0 === requestNodeIndex))) { return this._TcrGridComponent_0_6.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    if (this._TcrGridComponent_0_6.ngDoCheck(this,this._el_0,throwOnChange)) { this.compView_0.markAsCheckOnce(); }
    this.compView_0.internalDetectChanges(throwOnChange);
    if (!throwOnChange) { this._TcrGridComponent_0_6.context.ngAfterViewChecked(); }
  }
  destroyInternal():void {
    this.compView_0.destroy();
    this._TcrGridComponent_0_6.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
export const TcrGridComponentNgFactory:import11.ComponentFactory<import0.TcrGridComponent> = new import11.ComponentFactory<import0.TcrGridComponent>('zui-tcr-grid',View_TcrGridComponent_Host0,import0.TcrGridComponent);
const styles_TcrGridComponent:any[] = ([] as any[]);
class View_TcrGridComponent1 extends import2.AppView<any> {
  _el_0:any;
  compView_0:import2.AppView<import14.CoverageGridComponent>;
  _RequirementsAction_0_3:import15.RequirementsAction;
  _TCRAction_0_4:import6.TCRAction;
  _CoverageGridComponent_0_5:import16.Wrapper_CoverageGridComponent;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any,declaredViewContainer:import17.ViewContainer) {
    super(View_TcrGridComponent1,renderType_TcrGridComponent,import9.ViewType.EMBEDDED,viewUtils,parentView,parentIndex,parentElement,import10.ChangeDetectorStatus.CheckAlways,declaredViewContainer);
  }
  createInternal(rootSelector:string):import11.ComponentRef<any> {
    this._el_0 = import3.createRenderElement(this.renderer,(null as any),'zui-coverage-grid',import3.EMPTY_INLINE_ARRAY,(null as any));
    this.compView_0 = new import16.View_CoverageGridComponent0(this.viewUtils,this,0,this._el_0);
    this._RequirementsAction_0_3 = new import15.RequirementsAction(this.parentView.injectorGet(import12.Http,this.parentIndex));
    this._TCRAction_0_4 = new import6.TCRAction(this.parentView.injectorGet(import12.Http,this.parentIndex));
    this._CoverageGridComponent_0_5 = new import16.Wrapper_CoverageGridComponent(this._RequirementsAction_0_3,this._TCRAction_0_4);
    this.compView_0.create(this._CoverageGridComponent_0_5.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import15.RequirementsAction) && (0 === requestNodeIndex))) { return this._RequirementsAction_0_3; }
    if (((token === import6.TCRAction) && (0 === requestNodeIndex))) { return this._TCRAction_0_4; }
    if (((token === import14.CoverageGridComponent) && (0 === requestNodeIndex))) { return this._CoverageGridComponent_0_5.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_0_0_0:any = this.parentView.context._reqGridType;
    this._CoverageGridComponent_0_5.check_gridType(currVal_0_0_0,throwOnChange,false);
    const currVal_0_0_1:any = this.parentView.context.coverageRequirementIds;
    this._CoverageGridComponent_0_5.check_ids(currVal_0_0_1,throwOnChange,false);
    const currVal_0_0_2:any = this.parentView.context.releaseId;
    this._CoverageGridComponent_0_5.check_releaseId(currVal_0_0_2,throwOnChange,false);
    const currVal_0_0_3:boolean = !this.parentView.context.isSearchView;
    this._CoverageGridComponent_0_5.check_useRelease(currVal_0_0_3,throwOnChange,false);
    this._CoverageGridComponent_0_5.ngDoCheck(this,this._el_0,throwOnChange);
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  dirtyParentQueriesInternal():void {
    (<View_TcrGridComponent0>this.parentView)._viewQuery_CoverageGridComponent_1.setDirty();
  }
  destroyInternal():void {
    this.compView_0.destroy();
    this._CoverageGridComponent_0_5.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
var renderType_TcrGridComponent:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,styles_TcrGridComponent,{});
export class View_TcrGridComponent0 extends import2.AppView<import0.TcrGridComponent> {
  _viewQuery_GridComponent_0:import18.QueryList<any>;
  _viewQuery_CoverageGridComponent_1:import18.QueryList<any>;
  _el_0:any;
  compView_0:import2.AppView<import19.GridComponent>;
  _GridAction_0_3:import8.GridAction;
  _GlobalAction_0_4:import20.GlobalAction;
  _UtililtyFunctions_0_5:import21.UtililtyFunctions;
  _GridComponent_0_6:import22.Wrapper_GridComponent;
  _text_1:any;
  _text_2:any;
  _anchor_3:any;
  /*private*/ _vc_3:import17.ViewContainer;
  _TemplateRef_3_5:any;
  _NgIf_3_6:import23.Wrapper_NgIf;
  _text_4:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_TcrGridComponent0,renderType_TcrGridComponent,import9.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import10.ChangeDetectorStatus.CheckOnce);
  }
  createInternal(rootSelector:string):import11.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._viewQuery_GridComponent_0 = new import18.QueryList<any>();
    this._viewQuery_CoverageGridComponent_1 = new import18.QueryList<any>();
    this._el_0 = import3.createRenderElement(this.renderer,parentRenderNode,'grid',new import3.InlineArray2(2,'class','tcr-grid-table tcr-grid-table-main'),(null as any));
    this.compView_0 = new import22.View_GridComponent0(this.viewUtils,this,0,this._el_0);
    this._GridAction_0_3 = new import8.GridAction(this.parentView.injectorGet(import12.Http,this.parentIndex),this.parentView.injectorGet(import13.PouchDBPrefsServices,this.parentIndex));
    this._GlobalAction_0_4 = new import20.GlobalAction(this.parentView.injectorGet(import12.Http,this.parentIndex));
    this._UtililtyFunctions_0_5 = new import21.UtililtyFunctions();
    this._GridComponent_0_6 = new import22.Wrapper_GridComponent(this._GridAction_0_3,this._GlobalAction_0_4,new import24.ElementRef(this._el_0),this._UtililtyFunctions_0_5,this.compView_0.ref,this.parentView.injectorGet(import25.NgZone,this.parentIndex),this.parentView.injectorGet(import26.Router,this.parentIndex),this.parentView.injectorGet(import13.PouchDBPrefsServices,this.parentIndex),this.parentView.injectorGet(import27.ToastrService,this.parentIndex));
    this._text_1 = this.renderer.createText((null as any),'\n',(null as any));
    this.compView_0.create(this._GridComponent_0_6.context);
    this._text_2 = this.renderer.createText(parentRenderNode,'\n\n',(null as any));
    this._anchor_3 = this.renderer.createTemplateAnchor(parentRenderNode,(null as any));
    this._vc_3 = new import17.ViewContainer(3,(null as any),this,this._anchor_3);
    this._TemplateRef_3_5 = new import28.TemplateRef_(this,3,this._anchor_3);
    this._NgIf_3_6 = new import23.Wrapper_NgIf(this._vc_3.vcRef,this._TemplateRef_3_5);
    this._text_4 = this.renderer.createText(parentRenderNode,'\n',(null as any));
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_0,new import3.InlineArray16(16,'onGridRowClick',(null as any),'onGridPrevClick',(null as any),'onGridNextClick',(null as any),'onDialogTrigger',(null as any),'onGridPageSizeChange',(null as any),'onGridPaginateByIndex',(null as any),'onSort',(null as any),'onGridRowSelection',(null as any)),this.eventHandler(this.handleEvent_0));
    this._GridComponent_0_6.subscribe(this,this.eventHandler(this.handleEvent_0),false,true,true,false,false,true,true,false,false,true,true,false,false,false,false,true,true);
    this._viewQuery_GridComponent_0.reset([this._GridComponent_0_6.context]);
    this.context.gridNewUI = this._viewQuery_GridComponent_0.first;
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._text_1,
      this._text_2,
      this._anchor_3,
      this._text_4
    ]
    ),[disposable_0]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import8.GridAction) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 1)))) { return this._GridAction_0_3; }
    if (((token === import20.GlobalAction) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 1)))) { return this._GlobalAction_0_4; }
    if (((token === import21.UtililtyFunctions) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 1)))) { return this._UtililtyFunctions_0_5; }
    if (((token === import19.GridComponent) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 1)))) { return this._GridComponent_0_6.context; }
    if (((token === import28.TemplateRef) && (3 === requestNodeIndex))) { return this._TemplateRef_3_5; }
    if (((token === import29.NgIf) && (3 === requestNodeIndex))) { return this._NgIf_3_6.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_0_0_0:any = this.context.tcrGridRows;
    this._GridComponent_0_6.check_rows(currVal_0_0_0,throwOnChange,false);
    const currVal_0_0_1:any = true;
    this._GridComponent_0_6.check_emitSort(currVal_0_0_1,throwOnChange,false);
    const currVal_0_0_2:any = this.context._tcrGridType;
    this._GridComponent_0_6.check_gridType(currVal_0_0_2,throwOnChange,false);
    const currVal_0_0_3:any = this.context.hideReset;
    this._GridComponent_0_6.check_hideReset(currVal_0_0_3,throwOnChange,false);
    const currVal_0_0_4:any = this.context.selectedTctIds;
    this._GridComponent_0_6.check_rowIds(currVal_0_0_4,throwOnChange,false);
    const currVal_0_0_5:any = this.context.secIds;
    this._GridComponent_0_6.check_secondaryIds(currVal_0_0_5,throwOnChange,false);
    const currVal_0_0_6:any = true;
    this._GridComponent_0_6.check_doDirtyCheck(currVal_0_0_6,throwOnChange,false);
    const currVal_0_0_7:any = this.context.paginationOptions;
    this._GridComponent_0_6.check_paginationOptions(currVal_0_0_7,throwOnChange,false);
    this._GridComponent_0_6.ngDoCheck(this,this._el_0,throwOnChange);
    const currVal_3_0_0:any = this.context.coverageRequirementIds.length;
    this._NgIf_3_6.check_ngIf(currVal_3_0_0,throwOnChange,false);
    this._NgIf_3_6.ngDoCheck(this,this._anchor_3,throwOnChange);
    this._vc_3.detectChangesInNestedViews(throwOnChange);
    this.compView_0.internalDetectChanges(throwOnChange);
    if (!throwOnChange) {
      if (this._viewQuery_CoverageGridComponent_1.dirty) {
          this._viewQuery_CoverageGridComponent_1.reset([this._vc_3.mapNestedViews(View_TcrGridComponent1,(nestedView:View_TcrGridComponent1):any => {
            return [nestedView._CoverageGridComponent_0_5.context];
        })]);
        this.context.coverageComponent = this._viewQuery_CoverageGridComponent_1.first;
      }
      if ((this.numberOfChecks === 0)) { this._GridComponent_0_6.context.ngAfterViewInit(); }
    }
  }
  destroyInternal():void {
    this._vc_3.destroyNestedViews();
    this.compView_0.destroy();
    this._GridComponent_0_6.ngOnDestroy();
  }
  createEmbeddedViewInternal(nodeIndex:number):import2.AppView<any> {
    if ((nodeIndex == 3)) { return new View_TcrGridComponent1(this.viewUtils,this,3,this._anchor_3,this._vc_3); }
    return (null as any);
  }
  handleEvent_0(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'onGridRowClick')) {
      const pd_sub_0:any = ((<any>this.context.tcrGridRowClick($event)) !== false);
      result = (pd_sub_0 && result);
    }
    if ((eventName == 'onGridPrevClick')) {
      const pd_sub_1:any = ((<any>this.context.tcrGridPrevClick($event)) !== false);
      result = (pd_sub_1 && result);
    }
    if ((eventName == 'onGridNextClick')) {
      const pd_sub_2:any = ((<any>this.context.tcrGridNextClick($event)) !== false);
      result = (pd_sub_2 && result);
    }
    if ((eventName == 'onDialogTrigger')) {
      const pd_sub_3:any = ((<any>this.context.showTestcaseCoverage($event)) !== false);
      result = (pd_sub_3 && result);
    }
    if ((eventName == 'onGridPageSizeChange')) {
      const pd_sub_4:any = ((<any>this.context.tcrGridPageSizeChange($event)) !== false);
      result = (pd_sub_4 && result);
    }
    if ((eventName == 'onGridPaginateByIndex')) {
      const pd_sub_5:any = ((<any>this.context.tcrGridPaginateByIndex($event)) !== false);
      result = (pd_sub_5 && result);
    }
    if ((eventName == 'onSort')) {
      const pd_sub_6:any = ((<any>this.context.onSort($event)) !== false);
      result = (pd_sub_6 && result);
    }
    if ((eventName == 'onGridRowSelection')) {
      const pd_sub_7:any = ((<any>this.context.tcrGridRowSelection($event)) !== false);
      result = (pd_sub_7 && result);
    }
    return result;
  }
}